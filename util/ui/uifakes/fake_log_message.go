// This file was generated by counterfeiter
package uifakes

import (
	"sync"
	"time"

	"code.cloudfoundry.org/cli/util/ui"
)

type FakeLogMessage struct {
	MessageStub        func() string
	messageMutex       sync.RWMutex
	messageArgsForCall []struct{}
	messageReturns     struct {
		result1 string
	}
	TypeStub        func() string
	typeMutex       sync.RWMutex
	typeArgsForCall []struct{}
	typeReturns     struct {
		result1 string
	}
	TimestampStub        func() time.Time
	timestampMutex       sync.RWMutex
	timestampArgsForCall []struct{}
	timestampReturns     struct {
		result1 time.Time
	}
	ApplicationIDStub        func() string
	applicationIDMutex       sync.RWMutex
	applicationIDArgsForCall []struct{}
	applicationIDReturns     struct {
		result1 string
	}
	SourceTypeStub        func() string
	sourceTypeMutex       sync.RWMutex
	sourceTypeArgsForCall []struct{}
	sourceTypeReturns     struct {
		result1 string
	}
	SourceInstanceStub        func() string
	sourceInstanceMutex       sync.RWMutex
	sourceInstanceArgsForCall []struct{}
	sourceInstanceReturns     struct {
		result1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeLogMessage) Message() string {
	fake.messageMutex.Lock()
	fake.messageArgsForCall = append(fake.messageArgsForCall, struct{}{})
	fake.recordInvocation("Message", []interface{}{})
	fake.messageMutex.Unlock()
	if fake.MessageStub != nil {
		return fake.MessageStub()
	} else {
		return fake.messageReturns.result1
	}
}

func (fake *FakeLogMessage) MessageCallCount() int {
	fake.messageMutex.RLock()
	defer fake.messageMutex.RUnlock()
	return len(fake.messageArgsForCall)
}

func (fake *FakeLogMessage) MessageReturns(result1 string) {
	fake.MessageStub = nil
	fake.messageReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeLogMessage) Type() string {
	fake.typeMutex.Lock()
	fake.typeArgsForCall = append(fake.typeArgsForCall, struct{}{})
	fake.recordInvocation("Type", []interface{}{})
	fake.typeMutex.Unlock()
	if fake.TypeStub != nil {
		return fake.TypeStub()
	} else {
		return fake.typeReturns.result1
	}
}

func (fake *FakeLogMessage) TypeCallCount() int {
	fake.typeMutex.RLock()
	defer fake.typeMutex.RUnlock()
	return len(fake.typeArgsForCall)
}

func (fake *FakeLogMessage) TypeReturns(result1 string) {
	fake.TypeStub = nil
	fake.typeReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeLogMessage) Timestamp() time.Time {
	fake.timestampMutex.Lock()
	fake.timestampArgsForCall = append(fake.timestampArgsForCall, struct{}{})
	fake.recordInvocation("Timestamp", []interface{}{})
	fake.timestampMutex.Unlock()
	if fake.TimestampStub != nil {
		return fake.TimestampStub()
	} else {
		return fake.timestampReturns.result1
	}
}

func (fake *FakeLogMessage) TimestampCallCount() int {
	fake.timestampMutex.RLock()
	defer fake.timestampMutex.RUnlock()
	return len(fake.timestampArgsForCall)
}

func (fake *FakeLogMessage) TimestampReturns(result1 time.Time) {
	fake.TimestampStub = nil
	fake.timestampReturns = struct {
		result1 time.Time
	}{result1}
}

func (fake *FakeLogMessage) ApplicationID() string {
	fake.applicationIDMutex.Lock()
	fake.applicationIDArgsForCall = append(fake.applicationIDArgsForCall, struct{}{})
	fake.recordInvocation("ApplicationID", []interface{}{})
	fake.applicationIDMutex.Unlock()
	if fake.ApplicationIDStub != nil {
		return fake.ApplicationIDStub()
	} else {
		return fake.applicationIDReturns.result1
	}
}

func (fake *FakeLogMessage) ApplicationIDCallCount() int {
	fake.applicationIDMutex.RLock()
	defer fake.applicationIDMutex.RUnlock()
	return len(fake.applicationIDArgsForCall)
}

func (fake *FakeLogMessage) ApplicationIDReturns(result1 string) {
	fake.ApplicationIDStub = nil
	fake.applicationIDReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeLogMessage) SourceType() string {
	fake.sourceTypeMutex.Lock()
	fake.sourceTypeArgsForCall = append(fake.sourceTypeArgsForCall, struct{}{})
	fake.recordInvocation("SourceType", []interface{}{})
	fake.sourceTypeMutex.Unlock()
	if fake.SourceTypeStub != nil {
		return fake.SourceTypeStub()
	} else {
		return fake.sourceTypeReturns.result1
	}
}

func (fake *FakeLogMessage) SourceTypeCallCount() int {
	fake.sourceTypeMutex.RLock()
	defer fake.sourceTypeMutex.RUnlock()
	return len(fake.sourceTypeArgsForCall)
}

func (fake *FakeLogMessage) SourceTypeReturns(result1 string) {
	fake.SourceTypeStub = nil
	fake.sourceTypeReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeLogMessage) SourceInstance() string {
	fake.sourceInstanceMutex.Lock()
	fake.sourceInstanceArgsForCall = append(fake.sourceInstanceArgsForCall, struct{}{})
	fake.recordInvocation("SourceInstance", []interface{}{})
	fake.sourceInstanceMutex.Unlock()
	if fake.SourceInstanceStub != nil {
		return fake.SourceInstanceStub()
	} else {
		return fake.sourceInstanceReturns.result1
	}
}

func (fake *FakeLogMessage) SourceInstanceCallCount() int {
	fake.sourceInstanceMutex.RLock()
	defer fake.sourceInstanceMutex.RUnlock()
	return len(fake.sourceInstanceArgsForCall)
}

func (fake *FakeLogMessage) SourceInstanceReturns(result1 string) {
	fake.SourceInstanceStub = nil
	fake.sourceInstanceReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeLogMessage) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.messageMutex.RLock()
	defer fake.messageMutex.RUnlock()
	fake.typeMutex.RLock()
	defer fake.typeMutex.RUnlock()
	fake.timestampMutex.RLock()
	defer fake.timestampMutex.RUnlock()
	fake.applicationIDMutex.RLock()
	defer fake.applicationIDMutex.RUnlock()
	fake.sourceTypeMutex.RLock()
	defer fake.sourceTypeMutex.RUnlock()
	fake.sourceInstanceMutex.RLock()
	defer fake.sourceInstanceMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeLogMessage) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ ui.LogMessage = new(FakeLogMessage)
