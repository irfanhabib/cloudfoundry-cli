// This file was generated by counterfeiter
package v2fakes

import (
	"sync"

	"code.cloudfoundry.org/cli/actors/v2actions"
	"code.cloudfoundry.org/cli/commands/v2"
)

type FakeHelpActor struct {
	GetCommandInfoStub        func(interface{}, string) (v2actions.CommandInfo, error)
	getCommandInfoMutex       sync.RWMutex
	getCommandInfoArgsForCall []struct {
		arg1 interface{}
		arg2 string
	}
	getCommandInfoReturns struct {
		result1 v2actions.CommandInfo
		result2 error
	}
	GetAllNamesAndDescriptionsStub        func(interface{}) map[string]v2actions.CommandInfo
	getAllNamesAndDescriptionsMutex       sync.RWMutex
	getAllNamesAndDescriptionsArgsForCall []struct {
		arg1 interface{}
	}
	getAllNamesAndDescriptionsReturns struct {
		result1 map[string]v2actions.CommandInfo
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeHelpActor) GetCommandInfo(arg1 interface{}, arg2 string) (v2actions.CommandInfo, error) {
	fake.getCommandInfoMutex.Lock()
	fake.getCommandInfoArgsForCall = append(fake.getCommandInfoArgsForCall, struct {
		arg1 interface{}
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("GetCommandInfo", []interface{}{arg1, arg2})
	fake.getCommandInfoMutex.Unlock()
	if fake.GetCommandInfoStub != nil {
		return fake.GetCommandInfoStub(arg1, arg2)
	} else {
		return fake.getCommandInfoReturns.result1, fake.getCommandInfoReturns.result2
	}
}

func (fake *FakeHelpActor) GetCommandInfoCallCount() int {
	fake.getCommandInfoMutex.RLock()
	defer fake.getCommandInfoMutex.RUnlock()
	return len(fake.getCommandInfoArgsForCall)
}

func (fake *FakeHelpActor) GetCommandInfoArgsForCall(i int) (interface{}, string) {
	fake.getCommandInfoMutex.RLock()
	defer fake.getCommandInfoMutex.RUnlock()
	return fake.getCommandInfoArgsForCall[i].arg1, fake.getCommandInfoArgsForCall[i].arg2
}

func (fake *FakeHelpActor) GetCommandInfoReturns(result1 v2actions.CommandInfo, result2 error) {
	fake.GetCommandInfoStub = nil
	fake.getCommandInfoReturns = struct {
		result1 v2actions.CommandInfo
		result2 error
	}{result1, result2}
}

func (fake *FakeHelpActor) GetAllNamesAndDescriptions(arg1 interface{}) map[string]v2actions.CommandInfo {
	fake.getAllNamesAndDescriptionsMutex.Lock()
	fake.getAllNamesAndDescriptionsArgsForCall = append(fake.getAllNamesAndDescriptionsArgsForCall, struct {
		arg1 interface{}
	}{arg1})
	fake.recordInvocation("GetAllNamesAndDescriptions", []interface{}{arg1})
	fake.getAllNamesAndDescriptionsMutex.Unlock()
	if fake.GetAllNamesAndDescriptionsStub != nil {
		return fake.GetAllNamesAndDescriptionsStub(arg1)
	} else {
		return fake.getAllNamesAndDescriptionsReturns.result1
	}
}

func (fake *FakeHelpActor) GetAllNamesAndDescriptionsCallCount() int {
	fake.getAllNamesAndDescriptionsMutex.RLock()
	defer fake.getAllNamesAndDescriptionsMutex.RUnlock()
	return len(fake.getAllNamesAndDescriptionsArgsForCall)
}

func (fake *FakeHelpActor) GetAllNamesAndDescriptionsArgsForCall(i int) interface{} {
	fake.getAllNamesAndDescriptionsMutex.RLock()
	defer fake.getAllNamesAndDescriptionsMutex.RUnlock()
	return fake.getAllNamesAndDescriptionsArgsForCall[i].arg1
}

func (fake *FakeHelpActor) GetAllNamesAndDescriptionsReturns(result1 map[string]v2actions.CommandInfo) {
	fake.GetAllNamesAndDescriptionsStub = nil
	fake.getAllNamesAndDescriptionsReturns = struct {
		result1 map[string]v2actions.CommandInfo
	}{result1}
}

func (fake *FakeHelpActor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getCommandInfoMutex.RLock()
	defer fake.getCommandInfoMutex.RUnlock()
	fake.getAllNamesAndDescriptionsMutex.RLock()
	defer fake.getAllNamesAndDescriptionsMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeHelpActor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ v2.HelpActor = new(FakeHelpActor)
