// This file was generated by counterfeiter
package v2fakes

import (
	"sync"

	"code.cloudfoundry.org/cli/actor/pushaction"
	"code.cloudfoundry.org/cli/actor/pushaction/manifest"
	"code.cloudfoundry.org/cli/command/v2"
)

type FakeV2PushActor struct {
	ApplyStub        func(config pushaction.ApplicationConfig) (<-chan pushaction.Event, <-chan pushaction.Warnings, <-chan error)
	applyMutex       sync.RWMutex
	applyArgsForCall []struct {
		config pushaction.ApplicationConfig
	}
	applyReturns struct {
		result1 <-chan pushaction.Event
		result2 <-chan pushaction.Warnings
		result3 <-chan error
	}
	applyReturnsOnCall map[int]struct {
		result1 <-chan pushaction.Event
		result2 <-chan pushaction.Warnings
		result3 <-chan error
	}
	ConvertToApplicationConfigStub        func(spaceGUID string, apps []manifest.Application) ([]pushaction.ApplicationConfig, pushaction.Warnings, error)
	convertToApplicationConfigMutex       sync.RWMutex
	convertToApplicationConfigArgsForCall []struct {
		spaceGUID string
		apps      []manifest.Application
	}
	convertToApplicationConfigReturns struct {
		result1 []pushaction.ApplicationConfig
		result2 pushaction.Warnings
		result3 error
	}
	convertToApplicationConfigReturnsOnCall map[int]struct {
		result1 []pushaction.ApplicationConfig
		result2 pushaction.Warnings
		result3 error
	}
	MergeAndValidateSettingsAndManifestsStub        func(cmdSettings pushaction.CommandLineSettings, apps []manifest.Application) ([]manifest.Application, error)
	mergeAndValidateSettingsAndManifestsMutex       sync.RWMutex
	mergeAndValidateSettingsAndManifestsArgsForCall []struct {
		cmdSettings pushaction.CommandLineSettings
		apps        []manifest.Application
	}
	mergeAndValidateSettingsAndManifestsReturns struct {
		result1 []manifest.Application
		result2 error
	}
	mergeAndValidateSettingsAndManifestsReturnsOnCall map[int]struct {
		result1 []manifest.Application
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeV2PushActor) Apply(config pushaction.ApplicationConfig) (<-chan pushaction.Event, <-chan pushaction.Warnings, <-chan error) {
	fake.applyMutex.Lock()
	ret, specificReturn := fake.applyReturnsOnCall[len(fake.applyArgsForCall)]
	fake.applyArgsForCall = append(fake.applyArgsForCall, struct {
		config pushaction.ApplicationConfig
	}{config})
	fake.recordInvocation("Apply", []interface{}{config})
	fake.applyMutex.Unlock()
	if fake.ApplyStub != nil {
		return fake.ApplyStub(config)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fake.applyReturns.result1, fake.applyReturns.result2, fake.applyReturns.result3
}

func (fake *FakeV2PushActor) ApplyCallCount() int {
	fake.applyMutex.RLock()
	defer fake.applyMutex.RUnlock()
	return len(fake.applyArgsForCall)
}

func (fake *FakeV2PushActor) ApplyArgsForCall(i int) pushaction.ApplicationConfig {
	fake.applyMutex.RLock()
	defer fake.applyMutex.RUnlock()
	return fake.applyArgsForCall[i].config
}

func (fake *FakeV2PushActor) ApplyReturns(result1 <-chan pushaction.Event, result2 <-chan pushaction.Warnings, result3 <-chan error) {
	fake.ApplyStub = nil
	fake.applyReturns = struct {
		result1 <-chan pushaction.Event
		result2 <-chan pushaction.Warnings
		result3 <-chan error
	}{result1, result2, result3}
}

func (fake *FakeV2PushActor) ApplyReturnsOnCall(i int, result1 <-chan pushaction.Event, result2 <-chan pushaction.Warnings, result3 <-chan error) {
	fake.ApplyStub = nil
	if fake.applyReturnsOnCall == nil {
		fake.applyReturnsOnCall = make(map[int]struct {
			result1 <-chan pushaction.Event
			result2 <-chan pushaction.Warnings
			result3 <-chan error
		})
	}
	fake.applyReturnsOnCall[i] = struct {
		result1 <-chan pushaction.Event
		result2 <-chan pushaction.Warnings
		result3 <-chan error
	}{result1, result2, result3}
}

func (fake *FakeV2PushActor) ConvertToApplicationConfig(spaceGUID string, apps []manifest.Application) ([]pushaction.ApplicationConfig, pushaction.Warnings, error) {
	var appsCopy []manifest.Application
	if apps != nil {
		appsCopy = make([]manifest.Application, len(apps))
		copy(appsCopy, apps)
	}
	fake.convertToApplicationConfigMutex.Lock()
	ret, specificReturn := fake.convertToApplicationConfigReturnsOnCall[len(fake.convertToApplicationConfigArgsForCall)]
	fake.convertToApplicationConfigArgsForCall = append(fake.convertToApplicationConfigArgsForCall, struct {
		spaceGUID string
		apps      []manifest.Application
	}{spaceGUID, appsCopy})
	fake.recordInvocation("ConvertToApplicationConfig", []interface{}{spaceGUID, appsCopy})
	fake.convertToApplicationConfigMutex.Unlock()
	if fake.ConvertToApplicationConfigStub != nil {
		return fake.ConvertToApplicationConfigStub(spaceGUID, apps)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fake.convertToApplicationConfigReturns.result1, fake.convertToApplicationConfigReturns.result2, fake.convertToApplicationConfigReturns.result3
}

func (fake *FakeV2PushActor) ConvertToApplicationConfigCallCount() int {
	fake.convertToApplicationConfigMutex.RLock()
	defer fake.convertToApplicationConfigMutex.RUnlock()
	return len(fake.convertToApplicationConfigArgsForCall)
}

func (fake *FakeV2PushActor) ConvertToApplicationConfigArgsForCall(i int) (string, []manifest.Application) {
	fake.convertToApplicationConfigMutex.RLock()
	defer fake.convertToApplicationConfigMutex.RUnlock()
	return fake.convertToApplicationConfigArgsForCall[i].spaceGUID, fake.convertToApplicationConfigArgsForCall[i].apps
}

func (fake *FakeV2PushActor) ConvertToApplicationConfigReturns(result1 []pushaction.ApplicationConfig, result2 pushaction.Warnings, result3 error) {
	fake.ConvertToApplicationConfigStub = nil
	fake.convertToApplicationConfigReturns = struct {
		result1 []pushaction.ApplicationConfig
		result2 pushaction.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeV2PushActor) ConvertToApplicationConfigReturnsOnCall(i int, result1 []pushaction.ApplicationConfig, result2 pushaction.Warnings, result3 error) {
	fake.ConvertToApplicationConfigStub = nil
	if fake.convertToApplicationConfigReturnsOnCall == nil {
		fake.convertToApplicationConfigReturnsOnCall = make(map[int]struct {
			result1 []pushaction.ApplicationConfig
			result2 pushaction.Warnings
			result3 error
		})
	}
	fake.convertToApplicationConfigReturnsOnCall[i] = struct {
		result1 []pushaction.ApplicationConfig
		result2 pushaction.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeV2PushActor) MergeAndValidateSettingsAndManifests(cmdSettings pushaction.CommandLineSettings, apps []manifest.Application) ([]manifest.Application, error) {
	var appsCopy []manifest.Application
	if apps != nil {
		appsCopy = make([]manifest.Application, len(apps))
		copy(appsCopy, apps)
	}
	fake.mergeAndValidateSettingsAndManifestsMutex.Lock()
	ret, specificReturn := fake.mergeAndValidateSettingsAndManifestsReturnsOnCall[len(fake.mergeAndValidateSettingsAndManifestsArgsForCall)]
	fake.mergeAndValidateSettingsAndManifestsArgsForCall = append(fake.mergeAndValidateSettingsAndManifestsArgsForCall, struct {
		cmdSettings pushaction.CommandLineSettings
		apps        []manifest.Application
	}{cmdSettings, appsCopy})
	fake.recordInvocation("MergeAndValidateSettingsAndManifests", []interface{}{cmdSettings, appsCopy})
	fake.mergeAndValidateSettingsAndManifestsMutex.Unlock()
	if fake.MergeAndValidateSettingsAndManifestsStub != nil {
		return fake.MergeAndValidateSettingsAndManifestsStub(cmdSettings, apps)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.mergeAndValidateSettingsAndManifestsReturns.result1, fake.mergeAndValidateSettingsAndManifestsReturns.result2
}

func (fake *FakeV2PushActor) MergeAndValidateSettingsAndManifestsCallCount() int {
	fake.mergeAndValidateSettingsAndManifestsMutex.RLock()
	defer fake.mergeAndValidateSettingsAndManifestsMutex.RUnlock()
	return len(fake.mergeAndValidateSettingsAndManifestsArgsForCall)
}

func (fake *FakeV2PushActor) MergeAndValidateSettingsAndManifestsArgsForCall(i int) (pushaction.CommandLineSettings, []manifest.Application) {
	fake.mergeAndValidateSettingsAndManifestsMutex.RLock()
	defer fake.mergeAndValidateSettingsAndManifestsMutex.RUnlock()
	return fake.mergeAndValidateSettingsAndManifestsArgsForCall[i].cmdSettings, fake.mergeAndValidateSettingsAndManifestsArgsForCall[i].apps
}

func (fake *FakeV2PushActor) MergeAndValidateSettingsAndManifestsReturns(result1 []manifest.Application, result2 error) {
	fake.MergeAndValidateSettingsAndManifestsStub = nil
	fake.mergeAndValidateSettingsAndManifestsReturns = struct {
		result1 []manifest.Application
		result2 error
	}{result1, result2}
}

func (fake *FakeV2PushActor) MergeAndValidateSettingsAndManifestsReturnsOnCall(i int, result1 []manifest.Application, result2 error) {
	fake.MergeAndValidateSettingsAndManifestsStub = nil
	if fake.mergeAndValidateSettingsAndManifestsReturnsOnCall == nil {
		fake.mergeAndValidateSettingsAndManifestsReturnsOnCall = make(map[int]struct {
			result1 []manifest.Application
			result2 error
		})
	}
	fake.mergeAndValidateSettingsAndManifestsReturnsOnCall[i] = struct {
		result1 []manifest.Application
		result2 error
	}{result1, result2}
}

func (fake *FakeV2PushActor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.applyMutex.RLock()
	defer fake.applyMutex.RUnlock()
	fake.convertToApplicationConfigMutex.RLock()
	defer fake.convertToApplicationConfigMutex.RUnlock()
	fake.mergeAndValidateSettingsAndManifestsMutex.RLock()
	defer fake.mergeAndValidateSettingsAndManifestsMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeV2PushActor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ v2.V2PushActor = new(FakeV2PushActor)
