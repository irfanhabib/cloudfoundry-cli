// Code generated by counterfeiter. DO NOT EDIT.
package v2fakes

import (
	"sync"

	"code.cloudfoundry.org/cli/actor/v2action"
	"code.cloudfoundry.org/cli/command/v2"
)

type FakeSecurityGroupsActor struct {
	GetSecurityGroupsWithOrganizationAndSpaceStub        func() ([]v2action.SecurityGroupWithOrganizationAndSpace, v2action.Warnings, error)
	getSecurityGroupsWithOrganizationAndSpaceMutex       sync.RWMutex
	getSecurityGroupsWithOrganizationAndSpaceArgsForCall []struct{}
	getSecurityGroupsWithOrganizationAndSpaceReturns     struct {
		result1 []v2action.SecurityGroupWithOrganizationAndSpace
		result2 v2action.Warnings
		result3 error
	}
	getSecurityGroupsWithOrganizationAndSpaceReturnsOnCall map[int]struct {
		result1 []v2action.SecurityGroupWithOrganizationAndSpace
		result2 v2action.Warnings
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSecurityGroupsActor) GetSecurityGroupsWithOrganizationAndSpace() ([]v2action.SecurityGroupWithOrganizationAndSpace, v2action.Warnings, error) {
	fake.getSecurityGroupsWithOrganizationAndSpaceMutex.Lock()
	ret, specificReturn := fake.getSecurityGroupsWithOrganizationAndSpaceReturnsOnCall[len(fake.getSecurityGroupsWithOrganizationAndSpaceArgsForCall)]
	fake.getSecurityGroupsWithOrganizationAndSpaceArgsForCall = append(fake.getSecurityGroupsWithOrganizationAndSpaceArgsForCall, struct{}{})
	fake.recordInvocation("GetSecurityGroupsWithOrganizationAndSpace", []interface{}{})
	fake.getSecurityGroupsWithOrganizationAndSpaceMutex.Unlock()
	if fake.GetSecurityGroupsWithOrganizationAndSpaceStub != nil {
		return fake.GetSecurityGroupsWithOrganizationAndSpaceStub()
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fake.getSecurityGroupsWithOrganizationAndSpaceReturns.result1, fake.getSecurityGroupsWithOrganizationAndSpaceReturns.result2, fake.getSecurityGroupsWithOrganizationAndSpaceReturns.result3
}

func (fake *FakeSecurityGroupsActor) GetSecurityGroupsWithOrganizationAndSpaceCallCount() int {
	fake.getSecurityGroupsWithOrganizationAndSpaceMutex.RLock()
	defer fake.getSecurityGroupsWithOrganizationAndSpaceMutex.RUnlock()
	return len(fake.getSecurityGroupsWithOrganizationAndSpaceArgsForCall)
}

func (fake *FakeSecurityGroupsActor) GetSecurityGroupsWithOrganizationAndSpaceReturns(result1 []v2action.SecurityGroupWithOrganizationAndSpace, result2 v2action.Warnings, result3 error) {
	fake.GetSecurityGroupsWithOrganizationAndSpaceStub = nil
	fake.getSecurityGroupsWithOrganizationAndSpaceReturns = struct {
		result1 []v2action.SecurityGroupWithOrganizationAndSpace
		result2 v2action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeSecurityGroupsActor) GetSecurityGroupsWithOrganizationAndSpaceReturnsOnCall(i int, result1 []v2action.SecurityGroupWithOrganizationAndSpace, result2 v2action.Warnings, result3 error) {
	fake.GetSecurityGroupsWithOrganizationAndSpaceStub = nil
	if fake.getSecurityGroupsWithOrganizationAndSpaceReturnsOnCall == nil {
		fake.getSecurityGroupsWithOrganizationAndSpaceReturnsOnCall = make(map[int]struct {
			result1 []v2action.SecurityGroupWithOrganizationAndSpace
			result2 v2action.Warnings
			result3 error
		})
	}
	fake.getSecurityGroupsWithOrganizationAndSpaceReturnsOnCall[i] = struct {
		result1 []v2action.SecurityGroupWithOrganizationAndSpace
		result2 v2action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeSecurityGroupsActor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getSecurityGroupsWithOrganizationAndSpaceMutex.RLock()
	defer fake.getSecurityGroupsWithOrganizationAndSpaceMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeSecurityGroupsActor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ v2.SecurityGroupsActor = new(FakeSecurityGroupsActor)
