// Code generated by counterfeiter. DO NOT EDIT.
package v3fakes

import (
	"sync"

	"code.cloudfoundry.org/cli/actor/v3action"
	"code.cloudfoundry.org/cli/command/v3"
)

type FakeV3CreatePackageActor struct {
	CloudControllerAPIVersionStub        func() string
	cloudControllerAPIVersionMutex       sync.RWMutex
	cloudControllerAPIVersionArgsForCall []struct{}
	cloudControllerAPIVersionReturns     struct {
		result1 string
	}
	cloudControllerAPIVersionReturnsOnCall map[int]struct {
		result1 string
	}
	CreatePackageByApplicationNameAndSpaceStub        func(appName string, spaceGUID string, bitsPath string, dockerImageCredentials v3action.DockerImageCredentials) (v3action.Package, v3action.Warnings, error)
	createPackageByApplicationNameAndSpaceMutex       sync.RWMutex
	createPackageByApplicationNameAndSpaceArgsForCall []struct {
		appName                string
		spaceGUID              string
		bitsPath               string
		dockerImageCredentials v3action.DockerImageCredentials
	}
	createPackageByApplicationNameAndSpaceReturns struct {
		result1 v3action.Package
		result2 v3action.Warnings
		result3 error
	}
	createPackageByApplicationNameAndSpaceReturnsOnCall map[int]struct {
		result1 v3action.Package
		result2 v3action.Warnings
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeV3CreatePackageActor) CloudControllerAPIVersion() string {
	fake.cloudControllerAPIVersionMutex.Lock()
	ret, specificReturn := fake.cloudControllerAPIVersionReturnsOnCall[len(fake.cloudControllerAPIVersionArgsForCall)]
	fake.cloudControllerAPIVersionArgsForCall = append(fake.cloudControllerAPIVersionArgsForCall, struct{}{})
	fake.recordInvocation("CloudControllerAPIVersion", []interface{}{})
	fake.cloudControllerAPIVersionMutex.Unlock()
	if fake.CloudControllerAPIVersionStub != nil {
		return fake.CloudControllerAPIVersionStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.cloudControllerAPIVersionReturns.result1
}

func (fake *FakeV3CreatePackageActor) CloudControllerAPIVersionCallCount() int {
	fake.cloudControllerAPIVersionMutex.RLock()
	defer fake.cloudControllerAPIVersionMutex.RUnlock()
	return len(fake.cloudControllerAPIVersionArgsForCall)
}

func (fake *FakeV3CreatePackageActor) CloudControllerAPIVersionReturns(result1 string) {
	fake.CloudControllerAPIVersionStub = nil
	fake.cloudControllerAPIVersionReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeV3CreatePackageActor) CloudControllerAPIVersionReturnsOnCall(i int, result1 string) {
	fake.CloudControllerAPIVersionStub = nil
	if fake.cloudControllerAPIVersionReturnsOnCall == nil {
		fake.cloudControllerAPIVersionReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.cloudControllerAPIVersionReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeV3CreatePackageActor) CreatePackageByApplicationNameAndSpace(appName string, spaceGUID string, bitsPath string, dockerImageCredentials v3action.DockerImageCredentials) (v3action.Package, v3action.Warnings, error) {
	fake.createPackageByApplicationNameAndSpaceMutex.Lock()
	ret, specificReturn := fake.createPackageByApplicationNameAndSpaceReturnsOnCall[len(fake.createPackageByApplicationNameAndSpaceArgsForCall)]
	fake.createPackageByApplicationNameAndSpaceArgsForCall = append(fake.createPackageByApplicationNameAndSpaceArgsForCall, struct {
		appName                string
		spaceGUID              string
		bitsPath               string
		dockerImageCredentials v3action.DockerImageCredentials
	}{appName, spaceGUID, bitsPath, dockerImageCredentials})
	fake.recordInvocation("CreatePackageByApplicationNameAndSpace", []interface{}{appName, spaceGUID, bitsPath, dockerImageCredentials})
	fake.createPackageByApplicationNameAndSpaceMutex.Unlock()
	if fake.CreatePackageByApplicationNameAndSpaceStub != nil {
		return fake.CreatePackageByApplicationNameAndSpaceStub(appName, spaceGUID, bitsPath, dockerImageCredentials)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fake.createPackageByApplicationNameAndSpaceReturns.result1, fake.createPackageByApplicationNameAndSpaceReturns.result2, fake.createPackageByApplicationNameAndSpaceReturns.result3
}

func (fake *FakeV3CreatePackageActor) CreatePackageByApplicationNameAndSpaceCallCount() int {
	fake.createPackageByApplicationNameAndSpaceMutex.RLock()
	defer fake.createPackageByApplicationNameAndSpaceMutex.RUnlock()
	return len(fake.createPackageByApplicationNameAndSpaceArgsForCall)
}

func (fake *FakeV3CreatePackageActor) CreatePackageByApplicationNameAndSpaceArgsForCall(i int) (string, string, string, v3action.DockerImageCredentials) {
	fake.createPackageByApplicationNameAndSpaceMutex.RLock()
	defer fake.createPackageByApplicationNameAndSpaceMutex.RUnlock()
	return fake.createPackageByApplicationNameAndSpaceArgsForCall[i].appName, fake.createPackageByApplicationNameAndSpaceArgsForCall[i].spaceGUID, fake.createPackageByApplicationNameAndSpaceArgsForCall[i].bitsPath, fake.createPackageByApplicationNameAndSpaceArgsForCall[i].dockerImageCredentials
}

func (fake *FakeV3CreatePackageActor) CreatePackageByApplicationNameAndSpaceReturns(result1 v3action.Package, result2 v3action.Warnings, result3 error) {
	fake.CreatePackageByApplicationNameAndSpaceStub = nil
	fake.createPackageByApplicationNameAndSpaceReturns = struct {
		result1 v3action.Package
		result2 v3action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeV3CreatePackageActor) CreatePackageByApplicationNameAndSpaceReturnsOnCall(i int, result1 v3action.Package, result2 v3action.Warnings, result3 error) {
	fake.CreatePackageByApplicationNameAndSpaceStub = nil
	if fake.createPackageByApplicationNameAndSpaceReturnsOnCall == nil {
		fake.createPackageByApplicationNameAndSpaceReturnsOnCall = make(map[int]struct {
			result1 v3action.Package
			result2 v3action.Warnings
			result3 error
		})
	}
	fake.createPackageByApplicationNameAndSpaceReturnsOnCall[i] = struct {
		result1 v3action.Package
		result2 v3action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeV3CreatePackageActor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.cloudControllerAPIVersionMutex.RLock()
	defer fake.cloudControllerAPIVersionMutex.RUnlock()
	fake.createPackageByApplicationNameAndSpaceMutex.RLock()
	defer fake.createPackageByApplicationNameAndSpaceMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeV3CreatePackageActor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ v3.V3CreatePackageActor = new(FakeV3CreatePackageActor)
