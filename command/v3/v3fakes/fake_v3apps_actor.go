// Code generated by counterfeiter. DO NOT EDIT.
package v3fakes

import (
	"sync"

	"code.cloudfoundry.org/cli/actor/v3action"
	"code.cloudfoundry.org/cli/command/v3"
)

type FakeV3AppsActor struct {
	CloudControllerAPIVersionStub        func() string
	cloudControllerAPIVersionMutex       sync.RWMutex
	cloudControllerAPIVersionArgsForCall []struct{}
	cloudControllerAPIVersionReturns     struct {
		result1 string
	}
	cloudControllerAPIVersionReturnsOnCall map[int]struct {
		result1 string
	}
	GetApplicationSummariesBySpaceStub        func(spaceGUID string) ([]v3action.ApplicationSummary, v3action.Warnings, error)
	getApplicationSummariesBySpaceMutex       sync.RWMutex
	getApplicationSummariesBySpaceArgsForCall []struct {
		spaceGUID string
	}
	getApplicationSummariesBySpaceReturns struct {
		result1 []v3action.ApplicationSummary
		result2 v3action.Warnings
		result3 error
	}
	getApplicationSummariesBySpaceReturnsOnCall map[int]struct {
		result1 []v3action.ApplicationSummary
		result2 v3action.Warnings
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeV3AppsActor) CloudControllerAPIVersion() string {
	fake.cloudControllerAPIVersionMutex.Lock()
	ret, specificReturn := fake.cloudControllerAPIVersionReturnsOnCall[len(fake.cloudControllerAPIVersionArgsForCall)]
	fake.cloudControllerAPIVersionArgsForCall = append(fake.cloudControllerAPIVersionArgsForCall, struct{}{})
	fake.recordInvocation("CloudControllerAPIVersion", []interface{}{})
	fake.cloudControllerAPIVersionMutex.Unlock()
	if fake.CloudControllerAPIVersionStub != nil {
		return fake.CloudControllerAPIVersionStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.cloudControllerAPIVersionReturns.result1
}

func (fake *FakeV3AppsActor) CloudControllerAPIVersionCallCount() int {
	fake.cloudControllerAPIVersionMutex.RLock()
	defer fake.cloudControllerAPIVersionMutex.RUnlock()
	return len(fake.cloudControllerAPIVersionArgsForCall)
}

func (fake *FakeV3AppsActor) CloudControllerAPIVersionReturns(result1 string) {
	fake.CloudControllerAPIVersionStub = nil
	fake.cloudControllerAPIVersionReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeV3AppsActor) CloudControllerAPIVersionReturnsOnCall(i int, result1 string) {
	fake.CloudControllerAPIVersionStub = nil
	if fake.cloudControllerAPIVersionReturnsOnCall == nil {
		fake.cloudControllerAPIVersionReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.cloudControllerAPIVersionReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeV3AppsActor) GetApplicationSummariesBySpace(spaceGUID string) ([]v3action.ApplicationSummary, v3action.Warnings, error) {
	fake.getApplicationSummariesBySpaceMutex.Lock()
	ret, specificReturn := fake.getApplicationSummariesBySpaceReturnsOnCall[len(fake.getApplicationSummariesBySpaceArgsForCall)]
	fake.getApplicationSummariesBySpaceArgsForCall = append(fake.getApplicationSummariesBySpaceArgsForCall, struct {
		spaceGUID string
	}{spaceGUID})
	fake.recordInvocation("GetApplicationSummariesBySpace", []interface{}{spaceGUID})
	fake.getApplicationSummariesBySpaceMutex.Unlock()
	if fake.GetApplicationSummariesBySpaceStub != nil {
		return fake.GetApplicationSummariesBySpaceStub(spaceGUID)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fake.getApplicationSummariesBySpaceReturns.result1, fake.getApplicationSummariesBySpaceReturns.result2, fake.getApplicationSummariesBySpaceReturns.result3
}

func (fake *FakeV3AppsActor) GetApplicationSummariesBySpaceCallCount() int {
	fake.getApplicationSummariesBySpaceMutex.RLock()
	defer fake.getApplicationSummariesBySpaceMutex.RUnlock()
	return len(fake.getApplicationSummariesBySpaceArgsForCall)
}

func (fake *FakeV3AppsActor) GetApplicationSummariesBySpaceArgsForCall(i int) string {
	fake.getApplicationSummariesBySpaceMutex.RLock()
	defer fake.getApplicationSummariesBySpaceMutex.RUnlock()
	return fake.getApplicationSummariesBySpaceArgsForCall[i].spaceGUID
}

func (fake *FakeV3AppsActor) GetApplicationSummariesBySpaceReturns(result1 []v3action.ApplicationSummary, result2 v3action.Warnings, result3 error) {
	fake.GetApplicationSummariesBySpaceStub = nil
	fake.getApplicationSummariesBySpaceReturns = struct {
		result1 []v3action.ApplicationSummary
		result2 v3action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeV3AppsActor) GetApplicationSummariesBySpaceReturnsOnCall(i int, result1 []v3action.ApplicationSummary, result2 v3action.Warnings, result3 error) {
	fake.GetApplicationSummariesBySpaceStub = nil
	if fake.getApplicationSummariesBySpaceReturnsOnCall == nil {
		fake.getApplicationSummariesBySpaceReturnsOnCall = make(map[int]struct {
			result1 []v3action.ApplicationSummary
			result2 v3action.Warnings
			result3 error
		})
	}
	fake.getApplicationSummariesBySpaceReturnsOnCall[i] = struct {
		result1 []v3action.ApplicationSummary
		result2 v3action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeV3AppsActor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.cloudControllerAPIVersionMutex.RLock()
	defer fake.cloudControllerAPIVersionMutex.RUnlock()
	fake.getApplicationSummariesBySpaceMutex.RLock()
	defer fake.getApplicationSummariesBySpaceMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeV3AppsActor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ v3.V3AppsActor = new(FakeV3AppsActor)
