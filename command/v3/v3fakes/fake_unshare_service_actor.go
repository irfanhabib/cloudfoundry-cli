// Code generated by counterfeiter. DO NOT EDIT.
package v3fakes

import (
	"sync"

	"code.cloudfoundry.org/cli/actor/v2v3action"
	"code.cloudfoundry.org/cli/command/v3"
)

type FakeUnshareServiceActor struct {
	UnshareServiceInstanceFromOrganizationNameAndSpaceNameByNameAndSpaceStub        func(sharedToOrgName string, sharedToSpaceName string, serviceInstanceName string, currentlyTargetedSpaceGUID string) (v2v3action.Warnings, error)
	unshareServiceInstanceFromOrganizationNameAndSpaceNameByNameAndSpaceMutex       sync.RWMutex
	unshareServiceInstanceFromOrganizationNameAndSpaceNameByNameAndSpaceArgsForCall []struct {
		sharedToOrgName            string
		sharedToSpaceName          string
		serviceInstanceName        string
		currentlyTargetedSpaceGUID string
	}
	unshareServiceInstanceFromOrganizationNameAndSpaceNameByNameAndSpaceReturns struct {
		result1 v2v3action.Warnings
		result2 error
	}
	unshareServiceInstanceFromOrganizationNameAndSpaceNameByNameAndSpaceReturnsOnCall map[int]struct {
		result1 v2v3action.Warnings
		result2 error
	}
	CloudControllerV3APIVersionStub        func() string
	cloudControllerV3APIVersionMutex       sync.RWMutex
	cloudControllerV3APIVersionArgsForCall []struct{}
	cloudControllerV3APIVersionReturns     struct {
		result1 string
	}
	cloudControllerV3APIVersionReturnsOnCall map[int]struct {
		result1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeUnshareServiceActor) UnshareServiceInstanceFromOrganizationNameAndSpaceNameByNameAndSpace(sharedToOrgName string, sharedToSpaceName string, serviceInstanceName string, currentlyTargetedSpaceGUID string) (v2v3action.Warnings, error) {
	fake.unshareServiceInstanceFromOrganizationNameAndSpaceNameByNameAndSpaceMutex.Lock()
	ret, specificReturn := fake.unshareServiceInstanceFromOrganizationNameAndSpaceNameByNameAndSpaceReturnsOnCall[len(fake.unshareServiceInstanceFromOrganizationNameAndSpaceNameByNameAndSpaceArgsForCall)]
	fake.unshareServiceInstanceFromOrganizationNameAndSpaceNameByNameAndSpaceArgsForCall = append(fake.unshareServiceInstanceFromOrganizationNameAndSpaceNameByNameAndSpaceArgsForCall, struct {
		sharedToOrgName            string
		sharedToSpaceName          string
		serviceInstanceName        string
		currentlyTargetedSpaceGUID string
	}{sharedToOrgName, sharedToSpaceName, serviceInstanceName, currentlyTargetedSpaceGUID})
	fake.recordInvocation("UnshareServiceInstanceFromOrganizationNameAndSpaceNameByNameAndSpace", []interface{}{sharedToOrgName, sharedToSpaceName, serviceInstanceName, currentlyTargetedSpaceGUID})
	fake.unshareServiceInstanceFromOrganizationNameAndSpaceNameByNameAndSpaceMutex.Unlock()
	if fake.UnshareServiceInstanceFromOrganizationNameAndSpaceNameByNameAndSpaceStub != nil {
		return fake.UnshareServiceInstanceFromOrganizationNameAndSpaceNameByNameAndSpaceStub(sharedToOrgName, sharedToSpaceName, serviceInstanceName, currentlyTargetedSpaceGUID)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.unshareServiceInstanceFromOrganizationNameAndSpaceNameByNameAndSpaceReturns.result1, fake.unshareServiceInstanceFromOrganizationNameAndSpaceNameByNameAndSpaceReturns.result2
}

func (fake *FakeUnshareServiceActor) UnshareServiceInstanceFromOrganizationNameAndSpaceNameByNameAndSpaceCallCount() int {
	fake.unshareServiceInstanceFromOrganizationNameAndSpaceNameByNameAndSpaceMutex.RLock()
	defer fake.unshareServiceInstanceFromOrganizationNameAndSpaceNameByNameAndSpaceMutex.RUnlock()
	return len(fake.unshareServiceInstanceFromOrganizationNameAndSpaceNameByNameAndSpaceArgsForCall)
}

func (fake *FakeUnshareServiceActor) UnshareServiceInstanceFromOrganizationNameAndSpaceNameByNameAndSpaceArgsForCall(i int) (string, string, string, string) {
	fake.unshareServiceInstanceFromOrganizationNameAndSpaceNameByNameAndSpaceMutex.RLock()
	defer fake.unshareServiceInstanceFromOrganizationNameAndSpaceNameByNameAndSpaceMutex.RUnlock()
	return fake.unshareServiceInstanceFromOrganizationNameAndSpaceNameByNameAndSpaceArgsForCall[i].sharedToOrgName, fake.unshareServiceInstanceFromOrganizationNameAndSpaceNameByNameAndSpaceArgsForCall[i].sharedToSpaceName, fake.unshareServiceInstanceFromOrganizationNameAndSpaceNameByNameAndSpaceArgsForCall[i].serviceInstanceName, fake.unshareServiceInstanceFromOrganizationNameAndSpaceNameByNameAndSpaceArgsForCall[i].currentlyTargetedSpaceGUID
}

func (fake *FakeUnshareServiceActor) UnshareServiceInstanceFromOrganizationNameAndSpaceNameByNameAndSpaceReturns(result1 v2v3action.Warnings, result2 error) {
	fake.UnshareServiceInstanceFromOrganizationNameAndSpaceNameByNameAndSpaceStub = nil
	fake.unshareServiceInstanceFromOrganizationNameAndSpaceNameByNameAndSpaceReturns = struct {
		result1 v2v3action.Warnings
		result2 error
	}{result1, result2}
}

func (fake *FakeUnshareServiceActor) UnshareServiceInstanceFromOrganizationNameAndSpaceNameByNameAndSpaceReturnsOnCall(i int, result1 v2v3action.Warnings, result2 error) {
	fake.UnshareServiceInstanceFromOrganizationNameAndSpaceNameByNameAndSpaceStub = nil
	if fake.unshareServiceInstanceFromOrganizationNameAndSpaceNameByNameAndSpaceReturnsOnCall == nil {
		fake.unshareServiceInstanceFromOrganizationNameAndSpaceNameByNameAndSpaceReturnsOnCall = make(map[int]struct {
			result1 v2v3action.Warnings
			result2 error
		})
	}
	fake.unshareServiceInstanceFromOrganizationNameAndSpaceNameByNameAndSpaceReturnsOnCall[i] = struct {
		result1 v2v3action.Warnings
		result2 error
	}{result1, result2}
}

func (fake *FakeUnshareServiceActor) CloudControllerV3APIVersion() string {
	fake.cloudControllerV3APIVersionMutex.Lock()
	ret, specificReturn := fake.cloudControllerV3APIVersionReturnsOnCall[len(fake.cloudControllerV3APIVersionArgsForCall)]
	fake.cloudControllerV3APIVersionArgsForCall = append(fake.cloudControllerV3APIVersionArgsForCall, struct{}{})
	fake.recordInvocation("CloudControllerV3APIVersion", []interface{}{})
	fake.cloudControllerV3APIVersionMutex.Unlock()
	if fake.CloudControllerV3APIVersionStub != nil {
		return fake.CloudControllerV3APIVersionStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.cloudControllerV3APIVersionReturns.result1
}

func (fake *FakeUnshareServiceActor) CloudControllerV3APIVersionCallCount() int {
	fake.cloudControllerV3APIVersionMutex.RLock()
	defer fake.cloudControllerV3APIVersionMutex.RUnlock()
	return len(fake.cloudControllerV3APIVersionArgsForCall)
}

func (fake *FakeUnshareServiceActor) CloudControllerV3APIVersionReturns(result1 string) {
	fake.CloudControllerV3APIVersionStub = nil
	fake.cloudControllerV3APIVersionReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeUnshareServiceActor) CloudControllerV3APIVersionReturnsOnCall(i int, result1 string) {
	fake.CloudControllerV3APIVersionStub = nil
	if fake.cloudControllerV3APIVersionReturnsOnCall == nil {
		fake.cloudControllerV3APIVersionReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.cloudControllerV3APIVersionReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeUnshareServiceActor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.unshareServiceInstanceFromOrganizationNameAndSpaceNameByNameAndSpaceMutex.RLock()
	defer fake.unshareServiceInstanceFromOrganizationNameAndSpaceNameByNameAndSpaceMutex.RUnlock()
	fake.cloudControllerV3APIVersionMutex.RLock()
	defer fake.cloudControllerV3APIVersionMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeUnshareServiceActor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ v3.UnshareServiceActor = new(FakeUnshareServiceActor)
