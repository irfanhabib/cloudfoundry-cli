// This file was generated by counterfeiter
package v3fakes

import (
	"sync"

	"code.cloudfoundry.org/cli/actor/v3action"
	"code.cloudfoundry.org/cli/command/v3"
)

type FakeSetSpaceIsolationSegmentActor struct {
	AssignIsolationSegmentToSpaceByNameAndSpaceStub        func(isolationSegmentName string, spaceGUID string) (v3action.Warnings, error)
	assignIsolationSegmentToSpaceByNameAndSpaceMutex       sync.RWMutex
	assignIsolationSegmentToSpaceByNameAndSpaceArgsForCall []struct {
		isolationSegmentName string
		spaceGUID            string
	}
	assignIsolationSegmentToSpaceByNameAndSpaceReturns struct {
		result1 v3action.Warnings
		result2 error
	}
	assignIsolationSegmentToSpaceByNameAndSpaceReturnsOnCall map[int]struct {
		result1 v3action.Warnings
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSetSpaceIsolationSegmentActor) AssignIsolationSegmentToSpaceByNameAndSpace(isolationSegmentName string, spaceGUID string) (v3action.Warnings, error) {
	fake.assignIsolationSegmentToSpaceByNameAndSpaceMutex.Lock()
	ret, specificReturn := fake.assignIsolationSegmentToSpaceByNameAndSpaceReturnsOnCall[len(fake.assignIsolationSegmentToSpaceByNameAndSpaceArgsForCall)]
	fake.assignIsolationSegmentToSpaceByNameAndSpaceArgsForCall = append(fake.assignIsolationSegmentToSpaceByNameAndSpaceArgsForCall, struct {
		isolationSegmentName string
		spaceGUID            string
	}{isolationSegmentName, spaceGUID})
	fake.recordInvocation("AssignIsolationSegmentToSpaceByNameAndSpace", []interface{}{isolationSegmentName, spaceGUID})
	fake.assignIsolationSegmentToSpaceByNameAndSpaceMutex.Unlock()
	if fake.AssignIsolationSegmentToSpaceByNameAndSpaceStub != nil {
		return fake.AssignIsolationSegmentToSpaceByNameAndSpaceStub(isolationSegmentName, spaceGUID)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.assignIsolationSegmentToSpaceByNameAndSpaceReturns.result1, fake.assignIsolationSegmentToSpaceByNameAndSpaceReturns.result2
}

func (fake *FakeSetSpaceIsolationSegmentActor) AssignIsolationSegmentToSpaceByNameAndSpaceCallCount() int {
	fake.assignIsolationSegmentToSpaceByNameAndSpaceMutex.RLock()
	defer fake.assignIsolationSegmentToSpaceByNameAndSpaceMutex.RUnlock()
	return len(fake.assignIsolationSegmentToSpaceByNameAndSpaceArgsForCall)
}

func (fake *FakeSetSpaceIsolationSegmentActor) AssignIsolationSegmentToSpaceByNameAndSpaceArgsForCall(i int) (string, string) {
	fake.assignIsolationSegmentToSpaceByNameAndSpaceMutex.RLock()
	defer fake.assignIsolationSegmentToSpaceByNameAndSpaceMutex.RUnlock()
	return fake.assignIsolationSegmentToSpaceByNameAndSpaceArgsForCall[i].isolationSegmentName, fake.assignIsolationSegmentToSpaceByNameAndSpaceArgsForCall[i].spaceGUID
}

func (fake *FakeSetSpaceIsolationSegmentActor) AssignIsolationSegmentToSpaceByNameAndSpaceReturns(result1 v3action.Warnings, result2 error) {
	fake.AssignIsolationSegmentToSpaceByNameAndSpaceStub = nil
	fake.assignIsolationSegmentToSpaceByNameAndSpaceReturns = struct {
		result1 v3action.Warnings
		result2 error
	}{result1, result2}
}

func (fake *FakeSetSpaceIsolationSegmentActor) AssignIsolationSegmentToSpaceByNameAndSpaceReturnsOnCall(i int, result1 v3action.Warnings, result2 error) {
	fake.AssignIsolationSegmentToSpaceByNameAndSpaceStub = nil
	if fake.assignIsolationSegmentToSpaceByNameAndSpaceReturnsOnCall == nil {
		fake.assignIsolationSegmentToSpaceByNameAndSpaceReturnsOnCall = make(map[int]struct {
			result1 v3action.Warnings
			result2 error
		})
	}
	fake.assignIsolationSegmentToSpaceByNameAndSpaceReturnsOnCall[i] = struct {
		result1 v3action.Warnings
		result2 error
	}{result1, result2}
}

func (fake *FakeSetSpaceIsolationSegmentActor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.assignIsolationSegmentToSpaceByNameAndSpaceMutex.RLock()
	defer fake.assignIsolationSegmentToSpaceByNameAndSpaceMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeSetSpaceIsolationSegmentActor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ v3.SetSpaceIsolationSegmentActor = new(FakeSetSpaceIsolationSegmentActor)
