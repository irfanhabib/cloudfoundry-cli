// This file was generated by counterfeiter
package v3fakes

import (
	"sync"

	"code.cloudfoundry.org/cli/actor/v3action"
	"code.cloudfoundry.org/cli/command/v3"
)

type FakeCreateIsolationSegmentActor struct {
	CreateIsolationSegmentByNameStub        func(name string) (v3action.Warnings, error)
	createIsolationSegmentByNameMutex       sync.RWMutex
	createIsolationSegmentByNameArgsForCall []struct {
		name string
	}
	createIsolationSegmentByNameReturns struct {
		result1 v3action.Warnings
		result2 error
	}
	createIsolationSegmentByNameReturnsOnCall map[int]struct {
		result1 v3action.Warnings
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCreateIsolationSegmentActor) CreateIsolationSegmentByName(name string) (v3action.Warnings, error) {
	fake.createIsolationSegmentByNameMutex.Lock()
	ret, specificReturn := fake.createIsolationSegmentByNameReturnsOnCall[len(fake.createIsolationSegmentByNameArgsForCall)]
	fake.createIsolationSegmentByNameArgsForCall = append(fake.createIsolationSegmentByNameArgsForCall, struct {
		name string
	}{name})
	fake.recordInvocation("CreateIsolationSegmentByName", []interface{}{name})
	fake.createIsolationSegmentByNameMutex.Unlock()
	if fake.CreateIsolationSegmentByNameStub != nil {
		return fake.CreateIsolationSegmentByNameStub(name)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.createIsolationSegmentByNameReturns.result1, fake.createIsolationSegmentByNameReturns.result2
}

func (fake *FakeCreateIsolationSegmentActor) CreateIsolationSegmentByNameCallCount() int {
	fake.createIsolationSegmentByNameMutex.RLock()
	defer fake.createIsolationSegmentByNameMutex.RUnlock()
	return len(fake.createIsolationSegmentByNameArgsForCall)
}

func (fake *FakeCreateIsolationSegmentActor) CreateIsolationSegmentByNameArgsForCall(i int) string {
	fake.createIsolationSegmentByNameMutex.RLock()
	defer fake.createIsolationSegmentByNameMutex.RUnlock()
	return fake.createIsolationSegmentByNameArgsForCall[i].name
}

func (fake *FakeCreateIsolationSegmentActor) CreateIsolationSegmentByNameReturns(result1 v3action.Warnings, result2 error) {
	fake.CreateIsolationSegmentByNameStub = nil
	fake.createIsolationSegmentByNameReturns = struct {
		result1 v3action.Warnings
		result2 error
	}{result1, result2}
}

func (fake *FakeCreateIsolationSegmentActor) CreateIsolationSegmentByNameReturnsOnCall(i int, result1 v3action.Warnings, result2 error) {
	fake.CreateIsolationSegmentByNameStub = nil
	if fake.createIsolationSegmentByNameReturnsOnCall == nil {
		fake.createIsolationSegmentByNameReturnsOnCall = make(map[int]struct {
			result1 v3action.Warnings
			result2 error
		})
	}
	fake.createIsolationSegmentByNameReturnsOnCall[i] = struct {
		result1 v3action.Warnings
		result2 error
	}{result1, result2}
}

func (fake *FakeCreateIsolationSegmentActor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createIsolationSegmentByNameMutex.RLock()
	defer fake.createIsolationSegmentByNameMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeCreateIsolationSegmentActor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ v3.CreateIsolationSegmentActor = new(FakeCreateIsolationSegmentActor)
