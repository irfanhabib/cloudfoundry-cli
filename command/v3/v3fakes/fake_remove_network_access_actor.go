// Code generated by counterfeiter. DO NOT EDIT.
package v3fakes

import (
	"sync"

	"code.cloudfoundry.org/cli/actor/cfnetworkingaction"
	"code.cloudfoundry.org/cli/command/v3"
)

type FakeRemoveNetworkAccessActor struct {
	RemoveNetworkAccessStub        func(spaceGUID string, srcAppName string, destAppName string, protocol string, startPort int, endPort int) (cfnetworkingaction.Warnings, error)
	removeNetworkAccessMutex       sync.RWMutex
	removeNetworkAccessArgsForCall []struct {
		spaceGUID   string
		srcAppName  string
		destAppName string
		protocol    string
		startPort   int
		endPort     int
	}
	removeNetworkAccessReturns struct {
		result1 cfnetworkingaction.Warnings
		result2 error
	}
	removeNetworkAccessReturnsOnCall map[int]struct {
		result1 cfnetworkingaction.Warnings
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRemoveNetworkAccessActor) RemoveNetworkAccess(spaceGUID string, srcAppName string, destAppName string, protocol string, startPort int, endPort int) (cfnetworkingaction.Warnings, error) {
	fake.removeNetworkAccessMutex.Lock()
	ret, specificReturn := fake.removeNetworkAccessReturnsOnCall[len(fake.removeNetworkAccessArgsForCall)]
	fake.removeNetworkAccessArgsForCall = append(fake.removeNetworkAccessArgsForCall, struct {
		spaceGUID   string
		srcAppName  string
		destAppName string
		protocol    string
		startPort   int
		endPort     int
	}{spaceGUID, srcAppName, destAppName, protocol, startPort, endPort})
	fake.recordInvocation("RemoveNetworkAccess", []interface{}{spaceGUID, srcAppName, destAppName, protocol, startPort, endPort})
	fake.removeNetworkAccessMutex.Unlock()
	if fake.RemoveNetworkAccessStub != nil {
		return fake.RemoveNetworkAccessStub(spaceGUID, srcAppName, destAppName, protocol, startPort, endPort)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.removeNetworkAccessReturns.result1, fake.removeNetworkAccessReturns.result2
}

func (fake *FakeRemoveNetworkAccessActor) RemoveNetworkAccessCallCount() int {
	fake.removeNetworkAccessMutex.RLock()
	defer fake.removeNetworkAccessMutex.RUnlock()
	return len(fake.removeNetworkAccessArgsForCall)
}

func (fake *FakeRemoveNetworkAccessActor) RemoveNetworkAccessArgsForCall(i int) (string, string, string, string, int, int) {
	fake.removeNetworkAccessMutex.RLock()
	defer fake.removeNetworkAccessMutex.RUnlock()
	return fake.removeNetworkAccessArgsForCall[i].spaceGUID, fake.removeNetworkAccessArgsForCall[i].srcAppName, fake.removeNetworkAccessArgsForCall[i].destAppName, fake.removeNetworkAccessArgsForCall[i].protocol, fake.removeNetworkAccessArgsForCall[i].startPort, fake.removeNetworkAccessArgsForCall[i].endPort
}

func (fake *FakeRemoveNetworkAccessActor) RemoveNetworkAccessReturns(result1 cfnetworkingaction.Warnings, result2 error) {
	fake.RemoveNetworkAccessStub = nil
	fake.removeNetworkAccessReturns = struct {
		result1 cfnetworkingaction.Warnings
		result2 error
	}{result1, result2}
}

func (fake *FakeRemoveNetworkAccessActor) RemoveNetworkAccessReturnsOnCall(i int, result1 cfnetworkingaction.Warnings, result2 error) {
	fake.RemoveNetworkAccessStub = nil
	if fake.removeNetworkAccessReturnsOnCall == nil {
		fake.removeNetworkAccessReturnsOnCall = make(map[int]struct {
			result1 cfnetworkingaction.Warnings
			result2 error
		})
	}
	fake.removeNetworkAccessReturnsOnCall[i] = struct {
		result1 cfnetworkingaction.Warnings
		result2 error
	}{result1, result2}
}

func (fake *FakeRemoveNetworkAccessActor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.removeNetworkAccessMutex.RLock()
	defer fake.removeNetworkAccessMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeRemoveNetworkAccessActor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ v3.RemoveNetworkAccessActor = new(FakeRemoveNetworkAccessActor)
