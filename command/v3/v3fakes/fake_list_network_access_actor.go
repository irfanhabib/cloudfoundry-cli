// Code generated by counterfeiter. DO NOT EDIT.
package v3fakes

import (
	"sync"

	"code.cloudfoundry.org/cli/actor/cfnetworkingaction"
	"code.cloudfoundry.org/cli/command/v3"
)

type FakeListNetworkAccessActor struct {
	ListNetworkAccessStub        func(spaceGUID string, srcAppName string) ([]cfnetworkingaction.Policy, cfnetworkingaction.Warnings, error)
	listNetworkAccessMutex       sync.RWMutex
	listNetworkAccessArgsForCall []struct {
		spaceGUID  string
		srcAppName string
	}
	listNetworkAccessReturns struct {
		result1 []cfnetworkingaction.Policy
		result2 cfnetworkingaction.Warnings
		result3 error
	}
	listNetworkAccessReturnsOnCall map[int]struct {
		result1 []cfnetworkingaction.Policy
		result2 cfnetworkingaction.Warnings
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeListNetworkAccessActor) ListNetworkAccess(spaceGUID string, srcAppName string) ([]cfnetworkingaction.Policy, cfnetworkingaction.Warnings, error) {
	fake.listNetworkAccessMutex.Lock()
	ret, specificReturn := fake.listNetworkAccessReturnsOnCall[len(fake.listNetworkAccessArgsForCall)]
	fake.listNetworkAccessArgsForCall = append(fake.listNetworkAccessArgsForCall, struct {
		spaceGUID  string
		srcAppName string
	}{spaceGUID, srcAppName})
	fake.recordInvocation("ListNetworkAccess", []interface{}{spaceGUID, srcAppName})
	fake.listNetworkAccessMutex.Unlock()
	if fake.ListNetworkAccessStub != nil {
		return fake.ListNetworkAccessStub(spaceGUID, srcAppName)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fake.listNetworkAccessReturns.result1, fake.listNetworkAccessReturns.result2, fake.listNetworkAccessReturns.result3
}

func (fake *FakeListNetworkAccessActor) ListNetworkAccessCallCount() int {
	fake.listNetworkAccessMutex.RLock()
	defer fake.listNetworkAccessMutex.RUnlock()
	return len(fake.listNetworkAccessArgsForCall)
}

func (fake *FakeListNetworkAccessActor) ListNetworkAccessArgsForCall(i int) (string, string) {
	fake.listNetworkAccessMutex.RLock()
	defer fake.listNetworkAccessMutex.RUnlock()
	return fake.listNetworkAccessArgsForCall[i].spaceGUID, fake.listNetworkAccessArgsForCall[i].srcAppName
}

func (fake *FakeListNetworkAccessActor) ListNetworkAccessReturns(result1 []cfnetworkingaction.Policy, result2 cfnetworkingaction.Warnings, result3 error) {
	fake.ListNetworkAccessStub = nil
	fake.listNetworkAccessReturns = struct {
		result1 []cfnetworkingaction.Policy
		result2 cfnetworkingaction.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeListNetworkAccessActor) ListNetworkAccessReturnsOnCall(i int, result1 []cfnetworkingaction.Policy, result2 cfnetworkingaction.Warnings, result3 error) {
	fake.ListNetworkAccessStub = nil
	if fake.listNetworkAccessReturnsOnCall == nil {
		fake.listNetworkAccessReturnsOnCall = make(map[int]struct {
			result1 []cfnetworkingaction.Policy
			result2 cfnetworkingaction.Warnings
			result3 error
		})
	}
	fake.listNetworkAccessReturnsOnCall[i] = struct {
		result1 []cfnetworkingaction.Policy
		result2 cfnetworkingaction.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeListNetworkAccessActor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.listNetworkAccessMutex.RLock()
	defer fake.listNetworkAccessMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeListNetworkAccessActor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ v3.ListNetworkAccessActor = new(FakeListNetworkAccessActor)
