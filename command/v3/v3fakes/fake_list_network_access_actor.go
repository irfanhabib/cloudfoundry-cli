// Code generated by counterfeiter. DO NOT EDIT.
package v3fakes

import (
	"sync"

	"code.cloudfoundry.org/cli/actor/cfnetworkingaction"
	"code.cloudfoundry.org/cli/command/v3"
)

type FakeListNetworkAccessActor struct {
	ListNetworkAccessBySpaceAndAppNameStub        func(spaceGUID string, srcAppName string) ([]cfnetworkingaction.Policy, cfnetworkingaction.Warnings, error)
	listNetworkAccessBySpaceAndAppNameMutex       sync.RWMutex
	listNetworkAccessBySpaceAndAppNameArgsForCall []struct {
		spaceGUID  string
		srcAppName string
	}
	listNetworkAccessBySpaceAndAppNameReturns struct {
		result1 []cfnetworkingaction.Policy
		result2 cfnetworkingaction.Warnings
		result3 error
	}
	listNetworkAccessBySpaceAndAppNameReturnsOnCall map[int]struct {
		result1 []cfnetworkingaction.Policy
		result2 cfnetworkingaction.Warnings
		result3 error
	}
	ListNetworkAccessBySpaceStub        func(spaceGUID string) ([]cfnetworkingaction.Policy, cfnetworkingaction.Warnings, error)
	listNetworkAccessBySpaceMutex       sync.RWMutex
	listNetworkAccessBySpaceArgsForCall []struct {
		spaceGUID string
	}
	listNetworkAccessBySpaceReturns struct {
		result1 []cfnetworkingaction.Policy
		result2 cfnetworkingaction.Warnings
		result3 error
	}
	listNetworkAccessBySpaceReturnsOnCall map[int]struct {
		result1 []cfnetworkingaction.Policy
		result2 cfnetworkingaction.Warnings
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeListNetworkAccessActor) ListNetworkAccessBySpaceAndAppName(spaceGUID string, srcAppName string) ([]cfnetworkingaction.Policy, cfnetworkingaction.Warnings, error) {
	fake.listNetworkAccessBySpaceAndAppNameMutex.Lock()
	ret, specificReturn := fake.listNetworkAccessBySpaceAndAppNameReturnsOnCall[len(fake.listNetworkAccessBySpaceAndAppNameArgsForCall)]
	fake.listNetworkAccessBySpaceAndAppNameArgsForCall = append(fake.listNetworkAccessBySpaceAndAppNameArgsForCall, struct {
		spaceGUID  string
		srcAppName string
	}{spaceGUID, srcAppName})
	fake.recordInvocation("ListNetworkAccessBySpaceAndAppName", []interface{}{spaceGUID, srcAppName})
	fake.listNetworkAccessBySpaceAndAppNameMutex.Unlock()
	if fake.ListNetworkAccessBySpaceAndAppNameStub != nil {
		return fake.ListNetworkAccessBySpaceAndAppNameStub(spaceGUID, srcAppName)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fake.listNetworkAccessBySpaceAndAppNameReturns.result1, fake.listNetworkAccessBySpaceAndAppNameReturns.result2, fake.listNetworkAccessBySpaceAndAppNameReturns.result3
}

func (fake *FakeListNetworkAccessActor) ListNetworkAccessBySpaceAndAppNameCallCount() int {
	fake.listNetworkAccessBySpaceAndAppNameMutex.RLock()
	defer fake.listNetworkAccessBySpaceAndAppNameMutex.RUnlock()
	return len(fake.listNetworkAccessBySpaceAndAppNameArgsForCall)
}

func (fake *FakeListNetworkAccessActor) ListNetworkAccessBySpaceAndAppNameArgsForCall(i int) (string, string) {
	fake.listNetworkAccessBySpaceAndAppNameMutex.RLock()
	defer fake.listNetworkAccessBySpaceAndAppNameMutex.RUnlock()
	return fake.listNetworkAccessBySpaceAndAppNameArgsForCall[i].spaceGUID, fake.listNetworkAccessBySpaceAndAppNameArgsForCall[i].srcAppName
}

func (fake *FakeListNetworkAccessActor) ListNetworkAccessBySpaceAndAppNameReturns(result1 []cfnetworkingaction.Policy, result2 cfnetworkingaction.Warnings, result3 error) {
	fake.ListNetworkAccessBySpaceAndAppNameStub = nil
	fake.listNetworkAccessBySpaceAndAppNameReturns = struct {
		result1 []cfnetworkingaction.Policy
		result2 cfnetworkingaction.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeListNetworkAccessActor) ListNetworkAccessBySpaceAndAppNameReturnsOnCall(i int, result1 []cfnetworkingaction.Policy, result2 cfnetworkingaction.Warnings, result3 error) {
	fake.ListNetworkAccessBySpaceAndAppNameStub = nil
	if fake.listNetworkAccessBySpaceAndAppNameReturnsOnCall == nil {
		fake.listNetworkAccessBySpaceAndAppNameReturnsOnCall = make(map[int]struct {
			result1 []cfnetworkingaction.Policy
			result2 cfnetworkingaction.Warnings
			result3 error
		})
	}
	fake.listNetworkAccessBySpaceAndAppNameReturnsOnCall[i] = struct {
		result1 []cfnetworkingaction.Policy
		result2 cfnetworkingaction.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeListNetworkAccessActor) ListNetworkAccessBySpace(spaceGUID string) ([]cfnetworkingaction.Policy, cfnetworkingaction.Warnings, error) {
	fake.listNetworkAccessBySpaceMutex.Lock()
	ret, specificReturn := fake.listNetworkAccessBySpaceReturnsOnCall[len(fake.listNetworkAccessBySpaceArgsForCall)]
	fake.listNetworkAccessBySpaceArgsForCall = append(fake.listNetworkAccessBySpaceArgsForCall, struct {
		spaceGUID string
	}{spaceGUID})
	fake.recordInvocation("ListNetworkAccessBySpace", []interface{}{spaceGUID})
	fake.listNetworkAccessBySpaceMutex.Unlock()
	if fake.ListNetworkAccessBySpaceStub != nil {
		return fake.ListNetworkAccessBySpaceStub(spaceGUID)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fake.listNetworkAccessBySpaceReturns.result1, fake.listNetworkAccessBySpaceReturns.result2, fake.listNetworkAccessBySpaceReturns.result3
}

func (fake *FakeListNetworkAccessActor) ListNetworkAccessBySpaceCallCount() int {
	fake.listNetworkAccessBySpaceMutex.RLock()
	defer fake.listNetworkAccessBySpaceMutex.RUnlock()
	return len(fake.listNetworkAccessBySpaceArgsForCall)
}

func (fake *FakeListNetworkAccessActor) ListNetworkAccessBySpaceArgsForCall(i int) string {
	fake.listNetworkAccessBySpaceMutex.RLock()
	defer fake.listNetworkAccessBySpaceMutex.RUnlock()
	return fake.listNetworkAccessBySpaceArgsForCall[i].spaceGUID
}

func (fake *FakeListNetworkAccessActor) ListNetworkAccessBySpaceReturns(result1 []cfnetworkingaction.Policy, result2 cfnetworkingaction.Warnings, result3 error) {
	fake.ListNetworkAccessBySpaceStub = nil
	fake.listNetworkAccessBySpaceReturns = struct {
		result1 []cfnetworkingaction.Policy
		result2 cfnetworkingaction.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeListNetworkAccessActor) ListNetworkAccessBySpaceReturnsOnCall(i int, result1 []cfnetworkingaction.Policy, result2 cfnetworkingaction.Warnings, result3 error) {
	fake.ListNetworkAccessBySpaceStub = nil
	if fake.listNetworkAccessBySpaceReturnsOnCall == nil {
		fake.listNetworkAccessBySpaceReturnsOnCall = make(map[int]struct {
			result1 []cfnetworkingaction.Policy
			result2 cfnetworkingaction.Warnings
			result3 error
		})
	}
	fake.listNetworkAccessBySpaceReturnsOnCall[i] = struct {
		result1 []cfnetworkingaction.Policy
		result2 cfnetworkingaction.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeListNetworkAccessActor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.listNetworkAccessBySpaceAndAppNameMutex.RLock()
	defer fake.listNetworkAccessBySpaceAndAppNameMutex.RUnlock()
	fake.listNetworkAccessBySpaceMutex.RLock()
	defer fake.listNetworkAccessBySpaceMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeListNetworkAccessActor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ v3.ListNetworkAccessActor = new(FakeListNetworkAccessActor)
