// Code generated by counterfeiter. DO NOT EDIT.
package commonfakes

import (
	"sync"

	"code.cloudfoundry.org/cli/actor/pluginaction"
	"code.cloudfoundry.org/cli/command/common"
	"code.cloudfoundry.org/cli/util/configv3"
)

type FakeInstallPluginActor struct {
	CreateExecutableCopyStub        func(path string, tempPluginDir string) (string, error)
	createExecutableCopyMutex       sync.RWMutex
	createExecutableCopyArgsForCall []struct {
		path          string
		tempPluginDir string
	}
	createExecutableCopyReturns struct {
		result1 string
		result2 error
	}
	createExecutableCopyReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	DownloadExecutableBinaryFromURLStub        func(url string, tempPluginDir string) (string, int64, error)
	downloadExecutableBinaryFromURLMutex       sync.RWMutex
	downloadExecutableBinaryFromURLArgsForCall []struct {
		url           string
		tempPluginDir string
	}
	downloadExecutableBinaryFromURLReturns struct {
		result1 string
		result2 int64
		result3 error
	}
	downloadExecutableBinaryFromURLReturnsOnCall map[int]struct {
		result1 string
		result2 int64
		result3 error
	}
	FileExistsStub        func(path string) bool
	fileExistsMutex       sync.RWMutex
	fileExistsArgsForCall []struct {
		path string
	}
	fileExistsReturns struct {
		result1 bool
	}
	fileExistsReturnsOnCall map[int]struct {
		result1 bool
	}
	GetAndValidatePluginStub        func(metadata pluginaction.PluginMetadata, commands pluginaction.CommandList, path string) (configv3.Plugin, error)
	getAndValidatePluginMutex       sync.RWMutex
	getAndValidatePluginArgsForCall []struct {
		metadata pluginaction.PluginMetadata
		commands pluginaction.CommandList
		path     string
	}
	getAndValidatePluginReturns struct {
		result1 configv3.Plugin
		result2 error
	}
	getAndValidatePluginReturnsOnCall map[int]struct {
		result1 configv3.Plugin
		result2 error
	}
	GetPluginInfoFromRepositoryStub        func(pluginName string, repositoryName string) (pluginaction.PluginInfo, error)
	getPluginInfoFromRepositoryMutex       sync.RWMutex
	getPluginInfoFromRepositoryArgsForCall []struct {
		pluginName     string
		repositoryName string
	}
	getPluginInfoFromRepositoryReturns struct {
		result1 pluginaction.PluginInfo
		result2 error
	}
	getPluginInfoFromRepositoryReturnsOnCall map[int]struct {
		result1 pluginaction.PluginInfo
		result2 error
	}
	InstallPluginFromPathStub        func(path string, plugin configv3.Plugin) error
	installPluginFromPathMutex       sync.RWMutex
	installPluginFromPathArgsForCall []struct {
		path   string
		plugin configv3.Plugin
	}
	installPluginFromPathReturns struct {
		result1 error
	}
	installPluginFromPathReturnsOnCall map[int]struct {
		result1 error
	}
	IsPluginInstalledStub        func(pluginName string) bool
	isPluginInstalledMutex       sync.RWMutex
	isPluginInstalledArgsForCall []struct {
		pluginName string
	}
	isPluginInstalledReturns struct {
		result1 bool
	}
	isPluginInstalledReturnsOnCall map[int]struct {
		result1 bool
	}
	IsPluginRepositoryRegisteredStub        func(repositoryName string) bool
	isPluginRepositoryRegisteredMutex       sync.RWMutex
	isPluginRepositoryRegisteredArgsForCall []struct {
		repositoryName string
	}
	isPluginRepositoryRegisteredReturns struct {
		result1 bool
	}
	isPluginRepositoryRegisteredReturnsOnCall map[int]struct {
		result1 bool
	}
	UninstallPluginStub        func(uninstaller pluginaction.PluginUninstaller, name string) error
	uninstallPluginMutex       sync.RWMutex
	uninstallPluginArgsForCall []struct {
		uninstaller pluginaction.PluginUninstaller
		name        string
	}
	uninstallPluginReturns struct {
		result1 error
	}
	uninstallPluginReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeInstallPluginActor) CreateExecutableCopy(path string, tempPluginDir string) (string, error) {
	fake.createExecutableCopyMutex.Lock()
	ret, specificReturn := fake.createExecutableCopyReturnsOnCall[len(fake.createExecutableCopyArgsForCall)]
	fake.createExecutableCopyArgsForCall = append(fake.createExecutableCopyArgsForCall, struct {
		path          string
		tempPluginDir string
	}{path, tempPluginDir})
	fake.recordInvocation("CreateExecutableCopy", []interface{}{path, tempPluginDir})
	fake.createExecutableCopyMutex.Unlock()
	if fake.CreateExecutableCopyStub != nil {
		return fake.CreateExecutableCopyStub(path, tempPluginDir)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.createExecutableCopyReturns.result1, fake.createExecutableCopyReturns.result2
}

func (fake *FakeInstallPluginActor) CreateExecutableCopyCallCount() int {
	fake.createExecutableCopyMutex.RLock()
	defer fake.createExecutableCopyMutex.RUnlock()
	return len(fake.createExecutableCopyArgsForCall)
}

func (fake *FakeInstallPluginActor) CreateExecutableCopyArgsForCall(i int) (string, string) {
	fake.createExecutableCopyMutex.RLock()
	defer fake.createExecutableCopyMutex.RUnlock()
	return fake.createExecutableCopyArgsForCall[i].path, fake.createExecutableCopyArgsForCall[i].tempPluginDir
}

func (fake *FakeInstallPluginActor) CreateExecutableCopyReturns(result1 string, result2 error) {
	fake.CreateExecutableCopyStub = nil
	fake.createExecutableCopyReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeInstallPluginActor) CreateExecutableCopyReturnsOnCall(i int, result1 string, result2 error) {
	fake.CreateExecutableCopyStub = nil
	if fake.createExecutableCopyReturnsOnCall == nil {
		fake.createExecutableCopyReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.createExecutableCopyReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeInstallPluginActor) DownloadExecutableBinaryFromURL(url string, tempPluginDir string) (string, int64, error) {
	fake.downloadExecutableBinaryFromURLMutex.Lock()
	ret, specificReturn := fake.downloadExecutableBinaryFromURLReturnsOnCall[len(fake.downloadExecutableBinaryFromURLArgsForCall)]
	fake.downloadExecutableBinaryFromURLArgsForCall = append(fake.downloadExecutableBinaryFromURLArgsForCall, struct {
		url           string
		tempPluginDir string
	}{url, tempPluginDir})
	fake.recordInvocation("DownloadExecutableBinaryFromURL", []interface{}{url, tempPluginDir})
	fake.downloadExecutableBinaryFromURLMutex.Unlock()
	if fake.DownloadExecutableBinaryFromURLStub != nil {
		return fake.DownloadExecutableBinaryFromURLStub(url, tempPluginDir)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fake.downloadExecutableBinaryFromURLReturns.result1, fake.downloadExecutableBinaryFromURLReturns.result2, fake.downloadExecutableBinaryFromURLReturns.result3
}

func (fake *FakeInstallPluginActor) DownloadExecutableBinaryFromURLCallCount() int {
	fake.downloadExecutableBinaryFromURLMutex.RLock()
	defer fake.downloadExecutableBinaryFromURLMutex.RUnlock()
	return len(fake.downloadExecutableBinaryFromURLArgsForCall)
}

func (fake *FakeInstallPluginActor) DownloadExecutableBinaryFromURLArgsForCall(i int) (string, string) {
	fake.downloadExecutableBinaryFromURLMutex.RLock()
	defer fake.downloadExecutableBinaryFromURLMutex.RUnlock()
	return fake.downloadExecutableBinaryFromURLArgsForCall[i].url, fake.downloadExecutableBinaryFromURLArgsForCall[i].tempPluginDir
}

func (fake *FakeInstallPluginActor) DownloadExecutableBinaryFromURLReturns(result1 string, result2 int64, result3 error) {
	fake.DownloadExecutableBinaryFromURLStub = nil
	fake.downloadExecutableBinaryFromURLReturns = struct {
		result1 string
		result2 int64
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeInstallPluginActor) DownloadExecutableBinaryFromURLReturnsOnCall(i int, result1 string, result2 int64, result3 error) {
	fake.DownloadExecutableBinaryFromURLStub = nil
	if fake.downloadExecutableBinaryFromURLReturnsOnCall == nil {
		fake.downloadExecutableBinaryFromURLReturnsOnCall = make(map[int]struct {
			result1 string
			result2 int64
			result3 error
		})
	}
	fake.downloadExecutableBinaryFromURLReturnsOnCall[i] = struct {
		result1 string
		result2 int64
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeInstallPluginActor) FileExists(path string) bool {
	fake.fileExistsMutex.Lock()
	ret, specificReturn := fake.fileExistsReturnsOnCall[len(fake.fileExistsArgsForCall)]
	fake.fileExistsArgsForCall = append(fake.fileExistsArgsForCall, struct {
		path string
	}{path})
	fake.recordInvocation("FileExists", []interface{}{path})
	fake.fileExistsMutex.Unlock()
	if fake.FileExistsStub != nil {
		return fake.FileExistsStub(path)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.fileExistsReturns.result1
}

func (fake *FakeInstallPluginActor) FileExistsCallCount() int {
	fake.fileExistsMutex.RLock()
	defer fake.fileExistsMutex.RUnlock()
	return len(fake.fileExistsArgsForCall)
}

func (fake *FakeInstallPluginActor) FileExistsArgsForCall(i int) string {
	fake.fileExistsMutex.RLock()
	defer fake.fileExistsMutex.RUnlock()
	return fake.fileExistsArgsForCall[i].path
}

func (fake *FakeInstallPluginActor) FileExistsReturns(result1 bool) {
	fake.FileExistsStub = nil
	fake.fileExistsReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeInstallPluginActor) FileExistsReturnsOnCall(i int, result1 bool) {
	fake.FileExistsStub = nil
	if fake.fileExistsReturnsOnCall == nil {
		fake.fileExistsReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.fileExistsReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeInstallPluginActor) GetAndValidatePlugin(metadata pluginaction.PluginMetadata, commands pluginaction.CommandList, path string) (configv3.Plugin, error) {
	fake.getAndValidatePluginMutex.Lock()
	ret, specificReturn := fake.getAndValidatePluginReturnsOnCall[len(fake.getAndValidatePluginArgsForCall)]
	fake.getAndValidatePluginArgsForCall = append(fake.getAndValidatePluginArgsForCall, struct {
		metadata pluginaction.PluginMetadata
		commands pluginaction.CommandList
		path     string
	}{metadata, commands, path})
	fake.recordInvocation("GetAndValidatePlugin", []interface{}{metadata, commands, path})
	fake.getAndValidatePluginMutex.Unlock()
	if fake.GetAndValidatePluginStub != nil {
		return fake.GetAndValidatePluginStub(metadata, commands, path)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getAndValidatePluginReturns.result1, fake.getAndValidatePluginReturns.result2
}

func (fake *FakeInstallPluginActor) GetAndValidatePluginCallCount() int {
	fake.getAndValidatePluginMutex.RLock()
	defer fake.getAndValidatePluginMutex.RUnlock()
	return len(fake.getAndValidatePluginArgsForCall)
}

func (fake *FakeInstallPluginActor) GetAndValidatePluginArgsForCall(i int) (pluginaction.PluginMetadata, pluginaction.CommandList, string) {
	fake.getAndValidatePluginMutex.RLock()
	defer fake.getAndValidatePluginMutex.RUnlock()
	return fake.getAndValidatePluginArgsForCall[i].metadata, fake.getAndValidatePluginArgsForCall[i].commands, fake.getAndValidatePluginArgsForCall[i].path
}

func (fake *FakeInstallPluginActor) GetAndValidatePluginReturns(result1 configv3.Plugin, result2 error) {
	fake.GetAndValidatePluginStub = nil
	fake.getAndValidatePluginReturns = struct {
		result1 configv3.Plugin
		result2 error
	}{result1, result2}
}

func (fake *FakeInstallPluginActor) GetAndValidatePluginReturnsOnCall(i int, result1 configv3.Plugin, result2 error) {
	fake.GetAndValidatePluginStub = nil
	if fake.getAndValidatePluginReturnsOnCall == nil {
		fake.getAndValidatePluginReturnsOnCall = make(map[int]struct {
			result1 configv3.Plugin
			result2 error
		})
	}
	fake.getAndValidatePluginReturnsOnCall[i] = struct {
		result1 configv3.Plugin
		result2 error
	}{result1, result2}
}

func (fake *FakeInstallPluginActor) GetPluginInfoFromRepository(pluginName string, repositoryName string) (pluginaction.PluginInfo, error) {
	fake.getPluginInfoFromRepositoryMutex.Lock()
	ret, specificReturn := fake.getPluginInfoFromRepositoryReturnsOnCall[len(fake.getPluginInfoFromRepositoryArgsForCall)]
	fake.getPluginInfoFromRepositoryArgsForCall = append(fake.getPluginInfoFromRepositoryArgsForCall, struct {
		pluginName     string
		repositoryName string
	}{pluginName, repositoryName})
	fake.recordInvocation("GetPluginInfoFromRepository", []interface{}{pluginName, repositoryName})
	fake.getPluginInfoFromRepositoryMutex.Unlock()
	if fake.GetPluginInfoFromRepositoryStub != nil {
		return fake.GetPluginInfoFromRepositoryStub(pluginName, repositoryName)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getPluginInfoFromRepositoryReturns.result1, fake.getPluginInfoFromRepositoryReturns.result2
}

func (fake *FakeInstallPluginActor) GetPluginInfoFromRepositoryCallCount() int {
	fake.getPluginInfoFromRepositoryMutex.RLock()
	defer fake.getPluginInfoFromRepositoryMutex.RUnlock()
	return len(fake.getPluginInfoFromRepositoryArgsForCall)
}

func (fake *FakeInstallPluginActor) GetPluginInfoFromRepositoryArgsForCall(i int) (string, string) {
	fake.getPluginInfoFromRepositoryMutex.RLock()
	defer fake.getPluginInfoFromRepositoryMutex.RUnlock()
	return fake.getPluginInfoFromRepositoryArgsForCall[i].pluginName, fake.getPluginInfoFromRepositoryArgsForCall[i].repositoryName
}

func (fake *FakeInstallPluginActor) GetPluginInfoFromRepositoryReturns(result1 pluginaction.PluginInfo, result2 error) {
	fake.GetPluginInfoFromRepositoryStub = nil
	fake.getPluginInfoFromRepositoryReturns = struct {
		result1 pluginaction.PluginInfo
		result2 error
	}{result1, result2}
}

func (fake *FakeInstallPluginActor) GetPluginInfoFromRepositoryReturnsOnCall(i int, result1 pluginaction.PluginInfo, result2 error) {
	fake.GetPluginInfoFromRepositoryStub = nil
	if fake.getPluginInfoFromRepositoryReturnsOnCall == nil {
		fake.getPluginInfoFromRepositoryReturnsOnCall = make(map[int]struct {
			result1 pluginaction.PluginInfo
			result2 error
		})
	}
	fake.getPluginInfoFromRepositoryReturnsOnCall[i] = struct {
		result1 pluginaction.PluginInfo
		result2 error
	}{result1, result2}
}

func (fake *FakeInstallPluginActor) InstallPluginFromPath(path string, plugin configv3.Plugin) error {
	fake.installPluginFromPathMutex.Lock()
	ret, specificReturn := fake.installPluginFromPathReturnsOnCall[len(fake.installPluginFromPathArgsForCall)]
	fake.installPluginFromPathArgsForCall = append(fake.installPluginFromPathArgsForCall, struct {
		path   string
		plugin configv3.Plugin
	}{path, plugin})
	fake.recordInvocation("InstallPluginFromPath", []interface{}{path, plugin})
	fake.installPluginFromPathMutex.Unlock()
	if fake.InstallPluginFromPathStub != nil {
		return fake.InstallPluginFromPathStub(path, plugin)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.installPluginFromPathReturns.result1
}

func (fake *FakeInstallPluginActor) InstallPluginFromPathCallCount() int {
	fake.installPluginFromPathMutex.RLock()
	defer fake.installPluginFromPathMutex.RUnlock()
	return len(fake.installPluginFromPathArgsForCall)
}

func (fake *FakeInstallPluginActor) InstallPluginFromPathArgsForCall(i int) (string, configv3.Plugin) {
	fake.installPluginFromPathMutex.RLock()
	defer fake.installPluginFromPathMutex.RUnlock()
	return fake.installPluginFromPathArgsForCall[i].path, fake.installPluginFromPathArgsForCall[i].plugin
}

func (fake *FakeInstallPluginActor) InstallPluginFromPathReturns(result1 error) {
	fake.InstallPluginFromPathStub = nil
	fake.installPluginFromPathReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeInstallPluginActor) InstallPluginFromPathReturnsOnCall(i int, result1 error) {
	fake.InstallPluginFromPathStub = nil
	if fake.installPluginFromPathReturnsOnCall == nil {
		fake.installPluginFromPathReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.installPluginFromPathReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeInstallPluginActor) IsPluginInstalled(pluginName string) bool {
	fake.isPluginInstalledMutex.Lock()
	ret, specificReturn := fake.isPluginInstalledReturnsOnCall[len(fake.isPluginInstalledArgsForCall)]
	fake.isPluginInstalledArgsForCall = append(fake.isPluginInstalledArgsForCall, struct {
		pluginName string
	}{pluginName})
	fake.recordInvocation("IsPluginInstalled", []interface{}{pluginName})
	fake.isPluginInstalledMutex.Unlock()
	if fake.IsPluginInstalledStub != nil {
		return fake.IsPluginInstalledStub(pluginName)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.isPluginInstalledReturns.result1
}

func (fake *FakeInstallPluginActor) IsPluginInstalledCallCount() int {
	fake.isPluginInstalledMutex.RLock()
	defer fake.isPluginInstalledMutex.RUnlock()
	return len(fake.isPluginInstalledArgsForCall)
}

func (fake *FakeInstallPluginActor) IsPluginInstalledArgsForCall(i int) string {
	fake.isPluginInstalledMutex.RLock()
	defer fake.isPluginInstalledMutex.RUnlock()
	return fake.isPluginInstalledArgsForCall[i].pluginName
}

func (fake *FakeInstallPluginActor) IsPluginInstalledReturns(result1 bool) {
	fake.IsPluginInstalledStub = nil
	fake.isPluginInstalledReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeInstallPluginActor) IsPluginInstalledReturnsOnCall(i int, result1 bool) {
	fake.IsPluginInstalledStub = nil
	if fake.isPluginInstalledReturnsOnCall == nil {
		fake.isPluginInstalledReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.isPluginInstalledReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeInstallPluginActor) IsPluginRepositoryRegistered(repositoryName string) bool {
	fake.isPluginRepositoryRegisteredMutex.Lock()
	ret, specificReturn := fake.isPluginRepositoryRegisteredReturnsOnCall[len(fake.isPluginRepositoryRegisteredArgsForCall)]
	fake.isPluginRepositoryRegisteredArgsForCall = append(fake.isPluginRepositoryRegisteredArgsForCall, struct {
		repositoryName string
	}{repositoryName})
	fake.recordInvocation("IsPluginRepositoryRegistered", []interface{}{repositoryName})
	fake.isPluginRepositoryRegisteredMutex.Unlock()
	if fake.IsPluginRepositoryRegisteredStub != nil {
		return fake.IsPluginRepositoryRegisteredStub(repositoryName)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.isPluginRepositoryRegisteredReturns.result1
}

func (fake *FakeInstallPluginActor) IsPluginRepositoryRegisteredCallCount() int {
	fake.isPluginRepositoryRegisteredMutex.RLock()
	defer fake.isPluginRepositoryRegisteredMutex.RUnlock()
	return len(fake.isPluginRepositoryRegisteredArgsForCall)
}

func (fake *FakeInstallPluginActor) IsPluginRepositoryRegisteredArgsForCall(i int) string {
	fake.isPluginRepositoryRegisteredMutex.RLock()
	defer fake.isPluginRepositoryRegisteredMutex.RUnlock()
	return fake.isPluginRepositoryRegisteredArgsForCall[i].repositoryName
}

func (fake *FakeInstallPluginActor) IsPluginRepositoryRegisteredReturns(result1 bool) {
	fake.IsPluginRepositoryRegisteredStub = nil
	fake.isPluginRepositoryRegisteredReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeInstallPluginActor) IsPluginRepositoryRegisteredReturnsOnCall(i int, result1 bool) {
	fake.IsPluginRepositoryRegisteredStub = nil
	if fake.isPluginRepositoryRegisteredReturnsOnCall == nil {
		fake.isPluginRepositoryRegisteredReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.isPluginRepositoryRegisteredReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeInstallPluginActor) UninstallPlugin(uninstaller pluginaction.PluginUninstaller, name string) error {
	fake.uninstallPluginMutex.Lock()
	ret, specificReturn := fake.uninstallPluginReturnsOnCall[len(fake.uninstallPluginArgsForCall)]
	fake.uninstallPluginArgsForCall = append(fake.uninstallPluginArgsForCall, struct {
		uninstaller pluginaction.PluginUninstaller
		name        string
	}{uninstaller, name})
	fake.recordInvocation("UninstallPlugin", []interface{}{uninstaller, name})
	fake.uninstallPluginMutex.Unlock()
	if fake.UninstallPluginStub != nil {
		return fake.UninstallPluginStub(uninstaller, name)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.uninstallPluginReturns.result1
}

func (fake *FakeInstallPluginActor) UninstallPluginCallCount() int {
	fake.uninstallPluginMutex.RLock()
	defer fake.uninstallPluginMutex.RUnlock()
	return len(fake.uninstallPluginArgsForCall)
}

func (fake *FakeInstallPluginActor) UninstallPluginArgsForCall(i int) (pluginaction.PluginUninstaller, string) {
	fake.uninstallPluginMutex.RLock()
	defer fake.uninstallPluginMutex.RUnlock()
	return fake.uninstallPluginArgsForCall[i].uninstaller, fake.uninstallPluginArgsForCall[i].name
}

func (fake *FakeInstallPluginActor) UninstallPluginReturns(result1 error) {
	fake.UninstallPluginStub = nil
	fake.uninstallPluginReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeInstallPluginActor) UninstallPluginReturnsOnCall(i int, result1 error) {
	fake.UninstallPluginStub = nil
	if fake.uninstallPluginReturnsOnCall == nil {
		fake.uninstallPluginReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.uninstallPluginReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeInstallPluginActor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createExecutableCopyMutex.RLock()
	defer fake.createExecutableCopyMutex.RUnlock()
	fake.downloadExecutableBinaryFromURLMutex.RLock()
	defer fake.downloadExecutableBinaryFromURLMutex.RUnlock()
	fake.fileExistsMutex.RLock()
	defer fake.fileExistsMutex.RUnlock()
	fake.getAndValidatePluginMutex.RLock()
	defer fake.getAndValidatePluginMutex.RUnlock()
	fake.getPluginInfoFromRepositoryMutex.RLock()
	defer fake.getPluginInfoFromRepositoryMutex.RUnlock()
	fake.installPluginFromPathMutex.RLock()
	defer fake.installPluginFromPathMutex.RUnlock()
	fake.isPluginInstalledMutex.RLock()
	defer fake.isPluginInstalledMutex.RUnlock()
	fake.isPluginRepositoryRegisteredMutex.RLock()
	defer fake.isPluginRepositoryRegisteredMutex.RUnlock()
	fake.uninstallPluginMutex.RLock()
	defer fake.uninstallPluginMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeInstallPluginActor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ common.InstallPluginActor = new(FakeInstallPluginActor)
