// This file was generated by counterfeiter
package cloudcontrollerv2fakes

import (
	"sync"

	"code.cloudfoundry.org/cli/api/cloudcontrollerv2"
)

type FakeConnectionWrapper struct {
	MakeStub        func(passedRequest cloudcontrollerv2.Request, passedResponse *cloudcontrollerv2.Response) error
	makeMutex       sync.RWMutex
	makeArgsForCall []struct {
		passedRequest  cloudcontrollerv2.Request
		passedResponse *cloudcontrollerv2.Response
	}
	makeReturns struct {
		result1 error
	}
	WrapStub        func(innerconnection cloudcontrollerv2.Connection) cloudcontrollerv2.Connection
	wrapMutex       sync.RWMutex
	wrapArgsForCall []struct {
		innerconnection cloudcontrollerv2.Connection
	}
	wrapReturns struct {
		result1 cloudcontrollerv2.Connection
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeConnectionWrapper) Make(passedRequest cloudcontrollerv2.Request, passedResponse *cloudcontrollerv2.Response) error {
	fake.makeMutex.Lock()
	fake.makeArgsForCall = append(fake.makeArgsForCall, struct {
		passedRequest  cloudcontrollerv2.Request
		passedResponse *cloudcontrollerv2.Response
	}{passedRequest, passedResponse})
	fake.recordInvocation("Make", []interface{}{passedRequest, passedResponse})
	fake.makeMutex.Unlock()
	if fake.MakeStub != nil {
		return fake.MakeStub(passedRequest, passedResponse)
	} else {
		return fake.makeReturns.result1
	}
}

func (fake *FakeConnectionWrapper) MakeCallCount() int {
	fake.makeMutex.RLock()
	defer fake.makeMutex.RUnlock()
	return len(fake.makeArgsForCall)
}

func (fake *FakeConnectionWrapper) MakeArgsForCall(i int) (cloudcontrollerv2.Request, *cloudcontrollerv2.Response) {
	fake.makeMutex.RLock()
	defer fake.makeMutex.RUnlock()
	return fake.makeArgsForCall[i].passedRequest, fake.makeArgsForCall[i].passedResponse
}

func (fake *FakeConnectionWrapper) MakeReturns(result1 error) {
	fake.MakeStub = nil
	fake.makeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeConnectionWrapper) Wrap(innerconnection cloudcontrollerv2.Connection) cloudcontrollerv2.Connection {
	fake.wrapMutex.Lock()
	fake.wrapArgsForCall = append(fake.wrapArgsForCall, struct {
		innerconnection cloudcontrollerv2.Connection
	}{innerconnection})
	fake.recordInvocation("Wrap", []interface{}{innerconnection})
	fake.wrapMutex.Unlock()
	if fake.WrapStub != nil {
		return fake.WrapStub(innerconnection)
	} else {
		return fake.wrapReturns.result1
	}
}

func (fake *FakeConnectionWrapper) WrapCallCount() int {
	fake.wrapMutex.RLock()
	defer fake.wrapMutex.RUnlock()
	return len(fake.wrapArgsForCall)
}

func (fake *FakeConnectionWrapper) WrapArgsForCall(i int) cloudcontrollerv2.Connection {
	fake.wrapMutex.RLock()
	defer fake.wrapMutex.RUnlock()
	return fake.wrapArgsForCall[i].innerconnection
}

func (fake *FakeConnectionWrapper) WrapReturns(result1 cloudcontrollerv2.Connection) {
	fake.WrapStub = nil
	fake.wrapReturns = struct {
		result1 cloudcontrollerv2.Connection
	}{result1}
}

func (fake *FakeConnectionWrapper) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.makeMutex.RLock()
	defer fake.makeMutex.RUnlock()
	fake.wrapMutex.RLock()
	defer fake.wrapMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeConnectionWrapper) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ cloudcontrollerv2.ConnectionWrapper = new(FakeConnectionWrapper)
