// This file was generated by counterfeiter
package uaafakes

import (
	"sync"

	"code.cloudfoundry.org/cli/api/uaa"
)

type FakeAuthenticationStore struct {
	CFOAuthClientStub        func() string
	cFOAuthClientMutex       sync.RWMutex
	cFOAuthClientArgsForCall []struct{}
	cFOAuthClientReturns     struct {
		result1 string
	}
	CFOAuthClientSecretStub        func() string
	cFOAuthClientSecretMutex       sync.RWMutex
	cFOAuthClientSecretArgsForCall []struct{}
	cFOAuthClientSecretReturns     struct {
		result1 string
	}
	AccessTokenStub        func() string
	accessTokenMutex       sync.RWMutex
	accessTokenArgsForCall []struct{}
	accessTokenReturns     struct {
		result1 string
	}
	RefreshTokenStub        func() string
	refreshTokenMutex       sync.RWMutex
	refreshTokenArgsForCall []struct{}
	refreshTokenReturns     struct {
		result1 string
	}
	SetAccessTokenStub        func(token string)
	setAccessTokenMutex       sync.RWMutex
	setAccessTokenArgsForCall []struct {
		token string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAuthenticationStore) CFOAuthClient() string {
	fake.cFOAuthClientMutex.Lock()
	fake.cFOAuthClientArgsForCall = append(fake.cFOAuthClientArgsForCall, struct{}{})
	fake.recordInvocation("CFOAuthClient", []interface{}{})
	fake.cFOAuthClientMutex.Unlock()
	if fake.CFOAuthClientStub != nil {
		return fake.CFOAuthClientStub()
	} else {
		return fake.cFOAuthClientReturns.result1
	}
}

func (fake *FakeAuthenticationStore) CFOAuthClientCallCount() int {
	fake.cFOAuthClientMutex.RLock()
	defer fake.cFOAuthClientMutex.RUnlock()
	return len(fake.cFOAuthClientArgsForCall)
}

func (fake *FakeAuthenticationStore) CFOAuthClientReturns(result1 string) {
	fake.CFOAuthClientStub = nil
	fake.cFOAuthClientReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeAuthenticationStore) CFOAuthClientSecret() string {
	fake.cFOAuthClientSecretMutex.Lock()
	fake.cFOAuthClientSecretArgsForCall = append(fake.cFOAuthClientSecretArgsForCall, struct{}{})
	fake.recordInvocation("CFOAuthClientSecret", []interface{}{})
	fake.cFOAuthClientSecretMutex.Unlock()
	if fake.CFOAuthClientSecretStub != nil {
		return fake.CFOAuthClientSecretStub()
	} else {
		return fake.cFOAuthClientSecretReturns.result1
	}
}

func (fake *FakeAuthenticationStore) CFOAuthClientSecretCallCount() int {
	fake.cFOAuthClientSecretMutex.RLock()
	defer fake.cFOAuthClientSecretMutex.RUnlock()
	return len(fake.cFOAuthClientSecretArgsForCall)
}

func (fake *FakeAuthenticationStore) CFOAuthClientSecretReturns(result1 string) {
	fake.CFOAuthClientSecretStub = nil
	fake.cFOAuthClientSecretReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeAuthenticationStore) AccessToken() string {
	fake.accessTokenMutex.Lock()
	fake.accessTokenArgsForCall = append(fake.accessTokenArgsForCall, struct{}{})
	fake.recordInvocation("AccessToken", []interface{}{})
	fake.accessTokenMutex.Unlock()
	if fake.AccessTokenStub != nil {
		return fake.AccessTokenStub()
	} else {
		return fake.accessTokenReturns.result1
	}
}

func (fake *FakeAuthenticationStore) AccessTokenCallCount() int {
	fake.accessTokenMutex.RLock()
	defer fake.accessTokenMutex.RUnlock()
	return len(fake.accessTokenArgsForCall)
}

func (fake *FakeAuthenticationStore) AccessTokenReturns(result1 string) {
	fake.AccessTokenStub = nil
	fake.accessTokenReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeAuthenticationStore) RefreshToken() string {
	fake.refreshTokenMutex.Lock()
	fake.refreshTokenArgsForCall = append(fake.refreshTokenArgsForCall, struct{}{})
	fake.recordInvocation("RefreshToken", []interface{}{})
	fake.refreshTokenMutex.Unlock()
	if fake.RefreshTokenStub != nil {
		return fake.RefreshTokenStub()
	} else {
		return fake.refreshTokenReturns.result1
	}
}

func (fake *FakeAuthenticationStore) RefreshTokenCallCount() int {
	fake.refreshTokenMutex.RLock()
	defer fake.refreshTokenMutex.RUnlock()
	return len(fake.refreshTokenArgsForCall)
}

func (fake *FakeAuthenticationStore) RefreshTokenReturns(result1 string) {
	fake.RefreshTokenStub = nil
	fake.refreshTokenReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeAuthenticationStore) SetAccessToken(token string) {
	fake.setAccessTokenMutex.Lock()
	fake.setAccessTokenArgsForCall = append(fake.setAccessTokenArgsForCall, struct {
		token string
	}{token})
	fake.recordInvocation("SetAccessToken", []interface{}{token})
	fake.setAccessTokenMutex.Unlock()
	if fake.SetAccessTokenStub != nil {
		fake.SetAccessTokenStub(token)
	}
}

func (fake *FakeAuthenticationStore) SetAccessTokenCallCount() int {
	fake.setAccessTokenMutex.RLock()
	defer fake.setAccessTokenMutex.RUnlock()
	return len(fake.setAccessTokenArgsForCall)
}

func (fake *FakeAuthenticationStore) SetAccessTokenArgsForCall(i int) string {
	fake.setAccessTokenMutex.RLock()
	defer fake.setAccessTokenMutex.RUnlock()
	return fake.setAccessTokenArgsForCall[i].token
}

func (fake *FakeAuthenticationStore) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.cFOAuthClientMutex.RLock()
	defer fake.cFOAuthClientMutex.RUnlock()
	fake.cFOAuthClientSecretMutex.RLock()
	defer fake.cFOAuthClientSecretMutex.RUnlock()
	fake.accessTokenMutex.RLock()
	defer fake.accessTokenMutex.RUnlock()
	fake.refreshTokenMutex.RLock()
	defer fake.refreshTokenMutex.RUnlock()
	fake.setAccessTokenMutex.RLock()
	defer fake.setAccessTokenMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeAuthenticationStore) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ uaa.AuthenticationStore = new(FakeAuthenticationStore)
