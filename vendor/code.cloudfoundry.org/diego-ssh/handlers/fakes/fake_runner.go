// This file was generated by counterfeiter
package fakes

import (
	"os/exec"
	"sync"
	"syscall"

	"code.cloudfoundry.org/diego-ssh/handlers"
)

type FakeRunner struct {
	StartStub        func(cmd *exec.Cmd) error
	startMutex       sync.RWMutex
	startArgsForCall []struct {
		cmd *exec.Cmd
	}
	startReturns struct {
		result1 error
	}
	WaitStub        func(cmd *exec.Cmd) error
	waitMutex       sync.RWMutex
	waitArgsForCall []struct {
		cmd *exec.Cmd
	}
	waitReturns struct {
		result1 error
	}
	SignalStub        func(cmd *exec.Cmd, signal syscall.Signal) error
	signalMutex       sync.RWMutex
	signalArgsForCall []struct {
		cmd    *exec.Cmd
		signal syscall.Signal
	}
	signalReturns struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRunner) Start(cmd *exec.Cmd) error {
	fake.startMutex.Lock()
	fake.startArgsForCall = append(fake.startArgsForCall, struct {
		cmd *exec.Cmd
	}{cmd})
	fake.recordInvocation("Start", []interface{}{cmd})
	fake.startMutex.Unlock()
	if fake.StartStub != nil {
		return fake.StartStub(cmd)
	} else {
		return fake.startReturns.result1
	}
}

func (fake *FakeRunner) StartCallCount() int {
	fake.startMutex.RLock()
	defer fake.startMutex.RUnlock()
	return len(fake.startArgsForCall)
}

func (fake *FakeRunner) StartArgsForCall(i int) *exec.Cmd {
	fake.startMutex.RLock()
	defer fake.startMutex.RUnlock()
	return fake.startArgsForCall[i].cmd
}

func (fake *FakeRunner) StartReturns(result1 error) {
	fake.StartStub = nil
	fake.startReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRunner) Wait(cmd *exec.Cmd) error {
	fake.waitMutex.Lock()
	fake.waitArgsForCall = append(fake.waitArgsForCall, struct {
		cmd *exec.Cmd
	}{cmd})
	fake.recordInvocation("Wait", []interface{}{cmd})
	fake.waitMutex.Unlock()
	if fake.WaitStub != nil {
		return fake.WaitStub(cmd)
	} else {
		return fake.waitReturns.result1
	}
}

func (fake *FakeRunner) WaitCallCount() int {
	fake.waitMutex.RLock()
	defer fake.waitMutex.RUnlock()
	return len(fake.waitArgsForCall)
}

func (fake *FakeRunner) WaitArgsForCall(i int) *exec.Cmd {
	fake.waitMutex.RLock()
	defer fake.waitMutex.RUnlock()
	return fake.waitArgsForCall[i].cmd
}

func (fake *FakeRunner) WaitReturns(result1 error) {
	fake.WaitStub = nil
	fake.waitReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRunner) Signal(cmd *exec.Cmd, signal syscall.Signal) error {
	fake.signalMutex.Lock()
	fake.signalArgsForCall = append(fake.signalArgsForCall, struct {
		cmd    *exec.Cmd
		signal syscall.Signal
	}{cmd, signal})
	fake.recordInvocation("Signal", []interface{}{cmd, signal})
	fake.signalMutex.Unlock()
	if fake.SignalStub != nil {
		return fake.SignalStub(cmd, signal)
	} else {
		return fake.signalReturns.result1
	}
}

func (fake *FakeRunner) SignalCallCount() int {
	fake.signalMutex.RLock()
	defer fake.signalMutex.RUnlock()
	return len(fake.signalArgsForCall)
}

func (fake *FakeRunner) SignalArgsForCall(i int) (*exec.Cmd, syscall.Signal) {
	fake.signalMutex.RLock()
	defer fake.signalMutex.RUnlock()
	return fake.signalArgsForCall[i].cmd, fake.signalArgsForCall[i].signal
}

func (fake *FakeRunner) SignalReturns(result1 error) {
	fake.SignalStub = nil
	fake.signalReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRunner) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.startMutex.RLock()
	defer fake.startMutex.RUnlock()
	fake.waitMutex.RLock()
	defer fake.waitMutex.RUnlock()
	fake.signalMutex.RLock()
	defer fake.signalMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeRunner) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ handlers.Runner = new(FakeRunner)
