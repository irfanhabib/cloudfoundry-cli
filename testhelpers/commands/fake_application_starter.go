// This file was generated by counterfeiter
package commands

import (
	"sync"

	. "github.com/cloudfoundry/cli/cf/commands/application"
	"github.com/cloudfoundry/cli/cf/models"
)

type FakeApplicationStarter struct {
	SetStartTimeoutInSecondsStub        func(timeout int)
	setStartTimeoutInSecondsMutex       sync.RWMutex
	setStartTimeoutInSecondsArgsForCall []struct {
		arg1 int
	}
	ApplicationStartStub        func(app models.Application, orgName string, spaceName string) (updatedApp models.Application, err error)
	applicationStartMutex       sync.RWMutex
	applicationStartArgsForCall []struct {
		arg1 models.Application
		arg2 string
		arg3 string
	}
	applicationStartReturns struct {
		result1 models.Application
		result2 error
	}
}

func (fake *FakeApplicationStarter) SetStartTimeoutInSeconds(arg1 int) {
	fake.setStartTimeoutInSecondsMutex.Lock()
	defer fake.setStartTimeoutInSecondsMutex.Unlock()
	fake.setStartTimeoutInSecondsArgsForCall = append(fake.setStartTimeoutInSecondsArgsForCall, struct {
		arg1 int
	}{arg1})
	if fake.SetStartTimeoutInSecondsStub != nil {
		fake.SetStartTimeoutInSecondsStub(arg1)
	}
}

func (fake *FakeApplicationStarter) SetStartTimeoutInSecondsCallCount() int {
	fake.setStartTimeoutInSecondsMutex.RLock()
	defer fake.setStartTimeoutInSecondsMutex.RUnlock()
	return len(fake.setStartTimeoutInSecondsArgsForCall)
}

func (fake *FakeApplicationStarter) SetStartTimeoutInSecondsArgsForCall(i int) int {
	fake.setStartTimeoutInSecondsMutex.RLock()
	defer fake.setStartTimeoutInSecondsMutex.RUnlock()
	return fake.setStartTimeoutInSecondsArgsForCall[i].arg1
}

func (fake *FakeApplicationStarter) ApplicationStart(arg1 models.Application, arg2 string, arg3 string) (updatedApp models.Application, err error) {
	fake.applicationStartMutex.Lock()
	defer fake.applicationStartMutex.Unlock()
	fake.applicationStartArgsForCall = append(fake.applicationStartArgsForCall, struct {
		arg1 models.Application
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	if fake.ApplicationStartStub != nil {
		return fake.ApplicationStartStub(arg1, arg2, arg3)
	} else {
		return fake.applicationStartReturns.result1, fake.applicationStartReturns.result2
	}
}

func (fake *FakeApplicationStarter) ApplicationStartCallCount() int {
	fake.applicationStartMutex.RLock()
	defer fake.applicationStartMutex.RUnlock()
	return len(fake.applicationStartArgsForCall)
}

func (fake *FakeApplicationStarter) ApplicationStartArgsForCall(i int) (models.Application, string, string) {
	fake.applicationStartMutex.RLock()
	defer fake.applicationStartMutex.RUnlock()
	return fake.applicationStartArgsForCall[i].arg1, fake.applicationStartArgsForCall[i].arg2, fake.applicationStartArgsForCall[i].arg3
}

func (fake *FakeApplicationStarter) ApplicationStartReturns(result1 models.Application, result2 error) {
	fake.applicationStartReturns = struct {
		result1 models.Application
		result2 error
	}{result1, result2}
}

var _ ApplicationStarter = new(FakeApplicationStarter)
