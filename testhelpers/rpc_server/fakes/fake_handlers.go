// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/cloudfoundry/cli/testhelpers/rpc_server"
)

type FakeHandlers struct {
	IsMinCliVersionStub        func(args string, retVal *bool) error
	isMinCliVersionMutex       sync.RWMutex
	isMinCliVersionArgsForCall []struct {
		args   string
		retVal *bool
	}
	isMinCliVersionReturns struct {
		result1 error
	}
}

func (fake *FakeHandlers) IsMinCliVersion(args string, retVal *bool) error {
	fake.isMinCliVersionMutex.Lock()
	fake.isMinCliVersionArgsForCall = append(fake.isMinCliVersionArgsForCall, struct {
		args   string
		retVal *bool
	}{args, retVal})
	fake.isMinCliVersionMutex.Unlock()
	if fake.IsMinCliVersionStub != nil {
		return fake.IsMinCliVersionStub(args, retVal)
	} else {
		return fake.isMinCliVersionReturns.result1
	}
}

func (fake *FakeHandlers) IsMinCliVersionCallCount() int {
	fake.isMinCliVersionMutex.RLock()
	defer fake.isMinCliVersionMutex.RUnlock()
	return len(fake.isMinCliVersionArgsForCall)
}

func (fake *FakeHandlers) IsMinCliVersionArgsForCall(i int) (string, *bool) {
	fake.isMinCliVersionMutex.RLock()
	defer fake.isMinCliVersionMutex.RUnlock()
	return fake.isMinCliVersionArgsForCall[i].args, fake.isMinCliVersionArgsForCall[i].retVal
}

func (fake *FakeHandlers) IsMinCliVersionReturns(result1 error) {
	fake.IsMinCliVersionStub = nil
	fake.isMinCliVersionReturns = struct {
		result1 error
	}{result1}
}

var _ test_rpc_server.Handlers = new(FakeHandlers)
