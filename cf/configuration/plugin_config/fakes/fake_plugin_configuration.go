// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/cloudfoundry/cli/cf/configuration/plugin_config"
)

type FakePluginConfiguration struct {
	PluginsStub        func() map[string]string
	pluginsMutex       sync.RWMutex
	pluginsArgsForCall []struct{}
	pluginsReturns     struct {
		result1 map[string]string
	}
	SetPluginStub        func(string, string)
	setPluginMutex       sync.RWMutex
	setPluginArgsForCall []struct {
		arg1 string
		arg2 string
	}
	GetPluginPathStub        func() string
	getPluginPathMutex       sync.RWMutex
	getPluginPathArgsForCall []struct{}
	getPluginPathReturns     struct {
		result1 string
	}
}

func (fake *FakePluginConfiguration) Plugins() map[string]string {
	fake.pluginsMutex.Lock()
	fake.pluginsArgsForCall = append(fake.pluginsArgsForCall, struct{}{})
	fake.pluginsMutex.Unlock()
	if fake.PluginsStub != nil {
		return fake.PluginsStub()
	} else {
		return fake.pluginsReturns.result1
	}
}

func (fake *FakePluginConfiguration) PluginsCallCount() int {
	fake.pluginsMutex.RLock()
	defer fake.pluginsMutex.RUnlock()
	return len(fake.pluginsArgsForCall)
}

func (fake *FakePluginConfiguration) PluginsReturns(result1 map[string]string) {
	fake.PluginsStub = nil
	fake.pluginsReturns = struct {
		result1 map[string]string
	}{result1}
}

func (fake *FakePluginConfiguration) SetPlugin(arg1 string, arg2 string) {
	fake.setPluginMutex.Lock()
	fake.setPluginArgsForCall = append(fake.setPluginArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.setPluginMutex.Unlock()
	if fake.SetPluginStub != nil {
		fake.SetPluginStub(arg1, arg2)
	}
}

func (fake *FakePluginConfiguration) SetPluginCallCount() int {
	fake.setPluginMutex.RLock()
	defer fake.setPluginMutex.RUnlock()
	return len(fake.setPluginArgsForCall)
}

func (fake *FakePluginConfiguration) SetPluginArgsForCall(i int) (string, string) {
	fake.setPluginMutex.RLock()
	defer fake.setPluginMutex.RUnlock()
	return fake.setPluginArgsForCall[i].arg1, fake.setPluginArgsForCall[i].arg2
}

func (fake *FakePluginConfiguration) GetPluginPath() string {
	fake.getPluginPathMutex.Lock()
	fake.getPluginPathArgsForCall = append(fake.getPluginPathArgsForCall, struct{}{})
	fake.getPluginPathMutex.Unlock()
	if fake.GetPluginPathStub != nil {
		return fake.GetPluginPathStub()
	} else {
		return fake.getPluginPathReturns.result1
	}
}

func (fake *FakePluginConfiguration) GetPluginPathCallCount() int {
	fake.getPluginPathMutex.RLock()
	defer fake.getPluginPathMutex.RUnlock()
	return len(fake.getPluginPathArgsForCall)
}

func (fake *FakePluginConfiguration) GetPluginPathReturns(result1 string) {
	fake.GetPluginPathStub = nil
	fake.getPluginPathReturns = struct {
		result1 string
	}{result1}
}

var _ plugin_config.PluginConfiguration = new(FakePluginConfiguration)
