could not parse "services_plans.go": /Users/dan/go/src/github.com/cloudfoundry/cli/cf/actors/services_plans.go:36:1: expected declaration, found '<<' (and 2 more errors)// This file was generated by counterfeiter
package fakes

import (
	. "github.com/cloudfoundry/cli/cf/actors"

	"sync"
)

type FakeServicePlanActor struct {
	UpdateAllPlansForServiceStub        func(string) (bool, error)
	updateAllPlansForServiceMutex       sync.RWMutex
	updateAllPlansForServiceArgsForCall []struct {
		arg1 string
	}
	updateAllPlansForServiceReturns struct {
		result1 bool
		result2 error
	}
	UpdateSinglePlanForServiceStub        func(string, string, bool) (bool, error)
	updateSinglePlanForServiceMutex       sync.RWMutex
	updateSinglePlanForServiceArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 bool
	}
	updateSinglePlanForServiceReturns struct {
		result1 bool
		result2 error
	}
	UpdatePlanAndOrgForServiceStub        func(string, string, string, bool) (bool, error)
	updatePlanAndOrgForServiceMutex       sync.RWMutex
	updatePlanAndOrgForServiceArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 bool
	}
	updatePlanAndOrgForServiceReturns struct {
		result1 bool
		result2 error
	}
}

func (fake *FakeServicePlanActor) UpdateAllPlansForService(arg1 string) (bool, error) {
	fake.updateAllPlansForServiceMutex.Lock()
	defer fake.updateAllPlansForServiceMutex.Unlock()
	fake.updateAllPlansForServiceArgsForCall = append(fake.updateAllPlansForServiceArgsForCall, struct {
		arg1 string
	}{arg1})
	if fake.UpdateAllPlansForServiceStub != nil {
		return fake.UpdateAllPlansForServiceStub(arg1)
	} else {
		return fake.updateAllPlansForServiceReturns.result1, fake.updateAllPlansForServiceReturns.result2
	}
}

func (fake *FakeServicePlanActor) UpdateAllPlansForServiceCallCount() int {
	fake.updateAllPlansForServiceMutex.RLock()
	defer fake.updateAllPlansForServiceMutex.RUnlock()
	return len(fake.updateAllPlansForServiceArgsForCall)
}

func (fake *FakeServicePlanActor) UpdateAllPlansForServiceArgsForCall(i int) string {
	fake.updateAllPlansForServiceMutex.RLock()
	defer fake.updateAllPlansForServiceMutex.RUnlock()
	return fake.updateAllPlansForServiceArgsForCall[i].arg1
}

func (fake *FakeServicePlanActor) UpdateAllPlansForServiceReturns(result1 bool, result2 error) {
	fake.updateAllPlansForServiceReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeServicePlanActor) UpdateSinglePlanForService(arg1 string, arg2 string, arg3 bool) (bool, error) {
	fake.updateSinglePlanForServiceMutex.Lock()
	defer fake.updateSinglePlanForServiceMutex.Unlock()
	fake.updateSinglePlanForServiceArgsForCall = append(fake.updateSinglePlanForServiceArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 bool
	}{arg1, arg2, arg3})
	if fake.UpdateSinglePlanForServiceStub != nil {
		return fake.UpdateSinglePlanForServiceStub(arg1, arg2, arg3)
	} else {
		return fake.updateSinglePlanForServiceReturns.result1, fake.updateSinglePlanForServiceReturns.result2
	}
}

func (fake *FakeServicePlanActor) UpdateSinglePlanForServiceCallCount() int {
	fake.updateSinglePlanForServiceMutex.RLock()
	defer fake.updateSinglePlanForServiceMutex.RUnlock()
	return len(fake.updateSinglePlanForServiceArgsForCall)
}

func (fake *FakeServicePlanActor) UpdateSinglePlanForServiceArgsForCall(i int) (string, string, bool) {
	fake.updateSinglePlanForServiceMutex.RLock()
	defer fake.updateSinglePlanForServiceMutex.RUnlock()
	return fake.updateSinglePlanForServiceArgsForCall[i].arg1, fake.updateSinglePlanForServiceArgsForCall[i].arg2, fake.updateSinglePlanForServiceArgsForCall[i].arg3
}

func (fake *FakeServicePlanActor) UpdateSinglePlanForServiceReturns(result1 bool, result2 error) {
	fake.updateSinglePlanForServiceReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeServicePlanActor) UpdatePlanAndOrgForService(arg1 string, arg2 string, arg3 string, arg4 bool) (bool, error) {
	fake.updatePlanAndOrgForServiceMutex.Lock()
	defer fake.updatePlanAndOrgForServiceMutex.Unlock()
	fake.updatePlanAndOrgForServiceArgsForCall = append(fake.updatePlanAndOrgForServiceArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 bool
	}{arg1, arg2, arg3, arg4})
	if fake.UpdatePlanAndOrgForServiceStub != nil {
		return fake.UpdatePlanAndOrgForServiceStub(arg1, arg2, arg3, arg4)
	} else {
		return fake.updatePlanAndOrgForServiceReturns.result1, fake.updatePlanAndOrgForServiceReturns.result2
	}
}

func (fake *FakeServicePlanActor) UpdatePlanAndOrgForServiceCallCount() int {
	fake.updatePlanAndOrgForServiceMutex.RLock()
	defer fake.updatePlanAndOrgForServiceMutex.RUnlock()
	return len(fake.updatePlanAndOrgForServiceArgsForCall)
}

func (fake *FakeServicePlanActor) UpdatePlanAndOrgForServiceArgsForCall(i int) (string, string, string, bool) {
	fake.updatePlanAndOrgForServiceMutex.RLock()
	defer fake.updatePlanAndOrgForServiceMutex.RUnlock()
	return fake.updatePlanAndOrgForServiceArgsForCall[i].arg1, fake.updatePlanAndOrgForServiceArgsForCall[i].arg2, fake.updatePlanAndOrgForServiceArgsForCall[i].arg3, fake.updatePlanAndOrgForServiceArgsForCall[i].arg4
}

func (fake *FakeServicePlanActor) UpdatePlanAndOrgForServiceReturns(result1 bool, result2 error) {
	fake.UpdatePlanAndOrgForServiceStub = nil
	fake.updatePlanAndOrgForServiceReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

var _ actors.ServicePlanActor = new(FakeServicePlanActor)
