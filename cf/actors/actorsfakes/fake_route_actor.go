// This file was generated by counterfeiter
package actorsfakes

import (
	"sync"

	"github.com/cloudfoundry/cli/cf/actors"
	"github.com/cloudfoundry/cli/cf/models"
)

type FakeRouteActor struct {
	CreateRandomTCPRouteStub        func(domain models.DomainFields) (models.Route, error)
	createRandomTCPRouteMutex       sync.RWMutex
	createRandomTCPRouteArgsForCall []struct {
		domain models.DomainFields
	}
	createRandomTCPRouteReturns struct {
		result1 models.Route
		result2 error
	}
	FindOrCreateRouteStub        func(hostname string, domain models.DomainFields, path string, useRandomPort bool) (models.Route, error)
	findOrCreateRouteMutex       sync.RWMutex
	findOrCreateRouteArgsForCall []struct {
		hostname      string
		domain        models.DomainFields
		path          string
		useRandomPort bool
	}
	findOrCreateRouteReturns struct {
		result1 models.Route
		result2 error
	}
	BindRouteStub        func(app models.Application, route models.Route) error
	bindRouteMutex       sync.RWMutex
	bindRouteArgsForCall []struct {
		app   models.Application
		route models.Route
	}
	bindRouteReturns struct {
		result1 error
	}
	UnbindAllStub        func(app models.Application) error
	unbindAllMutex       sync.RWMutex
	unbindAllArgsForCall []struct {
		app models.Application
	}
	unbindAllReturns struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRouteActor) CreateRandomTCPRoute(domain models.DomainFields) (models.Route, error) {
	fake.createRandomTCPRouteMutex.Lock()
	fake.createRandomTCPRouteArgsForCall = append(fake.createRandomTCPRouteArgsForCall, struct {
		domain models.DomainFields
	}{domain})
	fake.recordInvocation("CreateRandomTCPRoute", []interface{}{domain})
	fake.createRandomTCPRouteMutex.Unlock()
	if fake.CreateRandomTCPRouteStub != nil {
		return fake.CreateRandomTCPRouteStub(domain)
	} else {
		return fake.createRandomTCPRouteReturns.result1, fake.createRandomTCPRouteReturns.result2
	}
}

func (fake *FakeRouteActor) CreateRandomTCPRouteCallCount() int {
	fake.createRandomTCPRouteMutex.RLock()
	defer fake.createRandomTCPRouteMutex.RUnlock()
	return len(fake.createRandomTCPRouteArgsForCall)
}

func (fake *FakeRouteActor) CreateRandomTCPRouteArgsForCall(i int) models.DomainFields {
	fake.createRandomTCPRouteMutex.RLock()
	defer fake.createRandomTCPRouteMutex.RUnlock()
	return fake.createRandomTCPRouteArgsForCall[i].domain
}

func (fake *FakeRouteActor) CreateRandomTCPRouteReturns(result1 models.Route, result2 error) {
	fake.CreateRandomTCPRouteStub = nil
	fake.createRandomTCPRouteReturns = struct {
		result1 models.Route
		result2 error
	}{result1, result2}
}

func (fake *FakeRouteActor) FindOrCreateRoute(hostname string, domain models.DomainFields, path string, useRandomPort bool) (models.Route, error) {
	fake.findOrCreateRouteMutex.Lock()
	fake.findOrCreateRouteArgsForCall = append(fake.findOrCreateRouteArgsForCall, struct {
		hostname      string
		domain        models.DomainFields
		path          string
		useRandomPort bool
	}{hostname, domain, path, useRandomPort})
	fake.recordInvocation("FindOrCreateRoute", []interface{}{hostname, domain, path, useRandomPort})
	fake.findOrCreateRouteMutex.Unlock()
	if fake.FindOrCreateRouteStub != nil {
		return fake.FindOrCreateRouteStub(hostname, domain, path, useRandomPort)
	} else {
		return fake.findOrCreateRouteReturns.result1, fake.findOrCreateRouteReturns.result2
	}
}

func (fake *FakeRouteActor) FindOrCreateRouteCallCount() int {
	fake.findOrCreateRouteMutex.RLock()
	defer fake.findOrCreateRouteMutex.RUnlock()
	return len(fake.findOrCreateRouteArgsForCall)
}

func (fake *FakeRouteActor) FindOrCreateRouteArgsForCall(i int) (string, models.DomainFields, string, bool) {
	fake.findOrCreateRouteMutex.RLock()
	defer fake.findOrCreateRouteMutex.RUnlock()
	return fake.findOrCreateRouteArgsForCall[i].hostname, fake.findOrCreateRouteArgsForCall[i].domain, fake.findOrCreateRouteArgsForCall[i].path, fake.findOrCreateRouteArgsForCall[i].useRandomPort
}

func (fake *FakeRouteActor) FindOrCreateRouteReturns(result1 models.Route, result2 error) {
	fake.FindOrCreateRouteStub = nil
	fake.findOrCreateRouteReturns = struct {
		result1 models.Route
		result2 error
	}{result1, result2}
}

func (fake *FakeRouteActor) BindRoute(app models.Application, route models.Route) error {
	fake.bindRouteMutex.Lock()
	fake.bindRouteArgsForCall = append(fake.bindRouteArgsForCall, struct {
		app   models.Application
		route models.Route
	}{app, route})
	fake.recordInvocation("BindRoute", []interface{}{app, route})
	fake.bindRouteMutex.Unlock()
	if fake.BindRouteStub != nil {
		return fake.BindRouteStub(app, route)
	} else {
		return fake.bindRouteReturns.result1
	}
}

func (fake *FakeRouteActor) BindRouteCallCount() int {
	fake.bindRouteMutex.RLock()
	defer fake.bindRouteMutex.RUnlock()
	return len(fake.bindRouteArgsForCall)
}

func (fake *FakeRouteActor) BindRouteArgsForCall(i int) (models.Application, models.Route) {
	fake.bindRouteMutex.RLock()
	defer fake.bindRouteMutex.RUnlock()
	return fake.bindRouteArgsForCall[i].app, fake.bindRouteArgsForCall[i].route
}

func (fake *FakeRouteActor) BindRouteReturns(result1 error) {
	fake.BindRouteStub = nil
	fake.bindRouteReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRouteActor) UnbindAll(app models.Application) error {
	fake.unbindAllMutex.Lock()
	fake.unbindAllArgsForCall = append(fake.unbindAllArgsForCall, struct {
		app models.Application
	}{app})
	fake.recordInvocation("UnbindAll", []interface{}{app})
	fake.unbindAllMutex.Unlock()
	if fake.UnbindAllStub != nil {
		return fake.UnbindAllStub(app)
	} else {
		return fake.unbindAllReturns.result1
	}
}

func (fake *FakeRouteActor) UnbindAllCallCount() int {
	fake.unbindAllMutex.RLock()
	defer fake.unbindAllMutex.RUnlock()
	return len(fake.unbindAllArgsForCall)
}

func (fake *FakeRouteActor) UnbindAllArgsForCall(i int) models.Application {
	fake.unbindAllMutex.RLock()
	defer fake.unbindAllMutex.RUnlock()
	return fake.unbindAllArgsForCall[i].app
}

func (fake *FakeRouteActor) UnbindAllReturns(result1 error) {
	fake.UnbindAllStub = nil
	fake.unbindAllReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRouteActor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createRandomTCPRouteMutex.RLock()
	defer fake.createRandomTCPRouteMutex.RUnlock()
	fake.findOrCreateRouteMutex.RLock()
	defer fake.findOrCreateRouteMutex.RUnlock()
	fake.bindRouteMutex.RLock()
	defer fake.bindRouteMutex.RUnlock()
	fake.unbindAllMutex.RLock()
	defer fake.unbindAllMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeRouteActor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ actors.RouteActor = new(FakeRouteActor)
