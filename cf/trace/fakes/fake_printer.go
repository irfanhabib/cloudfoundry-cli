// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/cloudfoundry/cli/cf/trace"
)

type FakePrinter struct {
	PrintStub        func(v ...interface{})
	printMutex       sync.RWMutex
	printArgsForCall []struct {
		v []interface{}
	}
	PrintfStub        func(format string, v ...interface{})
	printfMutex       sync.RWMutex
	printfArgsForCall []struct {
		format string
		v      []interface{}
	}
	PrintlnStub        func(v ...interface{})
	printlnMutex       sync.RWMutex
	printlnArgsForCall []struct {
		v []interface{}
	}
	IsEnabledStub        func() bool
	isEnabledMutex       sync.RWMutex
	isEnabledArgsForCall []struct{}
	isEnabledReturns     struct {
		result1 bool
	}
}

func (fake *FakePrinter) Print(v ...interface{}) {
	fake.printMutex.Lock()
	fake.printArgsForCall = append(fake.printArgsForCall, struct {
		v []interface{}
	}{v})
	fake.printMutex.Unlock()
	if fake.PrintStub != nil {
		fake.PrintStub(v...)
	}
}

func (fake *FakePrinter) PrintCallCount() int {
	fake.printMutex.RLock()
	defer fake.printMutex.RUnlock()
	return len(fake.printArgsForCall)
}

func (fake *FakePrinter) PrintArgsForCall(i int) []interface{} {
	fake.printMutex.RLock()
	defer fake.printMutex.RUnlock()
	return fake.printArgsForCall[i].v
}

func (fake *FakePrinter) Printf(format string, v ...interface{}) {
	fake.printfMutex.Lock()
	fake.printfArgsForCall = append(fake.printfArgsForCall, struct {
		format string
		v      []interface{}
	}{format, v})
	fake.printfMutex.Unlock()
	if fake.PrintfStub != nil {
		fake.PrintfStub(format, v...)
	}
}

func (fake *FakePrinter) PrintfCallCount() int {
	fake.printfMutex.RLock()
	defer fake.printfMutex.RUnlock()
	return len(fake.printfArgsForCall)
}

func (fake *FakePrinter) PrintfArgsForCall(i int) (string, []interface{}) {
	fake.printfMutex.RLock()
	defer fake.printfMutex.RUnlock()
	return fake.printfArgsForCall[i].format, fake.printfArgsForCall[i].v
}

func (fake *FakePrinter) Println(v ...interface{}) {
	fake.printlnMutex.Lock()
	fake.printlnArgsForCall = append(fake.printlnArgsForCall, struct {
		v []interface{}
	}{v})
	fake.printlnMutex.Unlock()
	if fake.PrintlnStub != nil {
		fake.PrintlnStub(v...)
	}
}

func (fake *FakePrinter) PrintlnCallCount() int {
	fake.printlnMutex.RLock()
	defer fake.printlnMutex.RUnlock()
	return len(fake.printlnArgsForCall)
}

func (fake *FakePrinter) PrintlnArgsForCall(i int) []interface{} {
	fake.printlnMutex.RLock()
	defer fake.printlnMutex.RUnlock()
	return fake.printlnArgsForCall[i].v
}

func (fake *FakePrinter) IsEnabled() bool {
	fake.isEnabledMutex.Lock()
	fake.isEnabledArgsForCall = append(fake.isEnabledArgsForCall, struct{}{})
	fake.isEnabledMutex.Unlock()
	if fake.IsEnabledStub != nil {
		return fake.IsEnabledStub()
	} else {
		return fake.isEnabledReturns.result1
	}
}

func (fake *FakePrinter) IsEnabledCallCount() int {
	fake.isEnabledMutex.RLock()
	defer fake.isEnabledMutex.RUnlock()
	return len(fake.isEnabledArgsForCall)
}

func (fake *FakePrinter) IsEnabledReturns(result1 bool) {
	fake.IsEnabledStub = nil
	fake.isEnabledReturns = struct {
		result1 bool
	}{result1}
}

var _ trace.Printer = new(FakePrinter)
