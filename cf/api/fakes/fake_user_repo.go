// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/cloudfoundry/cli/cf/api"
	"github.com/cloudfoundry/cli/cf/models"
)

type FakeUserRepository struct {
	FindByUsernameStub        func(username string) (user models.UserFields, apiErr error)
	findByUsernameMutex       sync.RWMutex
	findByUsernameArgsForCall []struct {
		username string
	}
	findByUsernameReturns struct {
		result1 models.UserFields
		result2 error
	}
	ListUsersInOrgForRoleStub        func(orgGuid string, role string) ([]models.UserFields, error)
	listUsersInOrgForRoleMutex       sync.RWMutex
	listUsersInOrgForRoleArgsForCall []struct {
		orgGuid string
		role    string
	}
	listUsersInOrgForRoleReturns struct {
		result1 []models.UserFields
		result2 error
	}
	ListUsersInOrgForRoleWithNoUAAStub        func(orgGuid string, role string) ([]models.UserFields, error)
	listUsersInOrgForRoleWithNoUAAMutex       sync.RWMutex
	listUsersInOrgForRoleWithNoUAAArgsForCall []struct {
		orgGuid string
		role    string
	}
	listUsersInOrgForRoleWithNoUAAReturns struct {
		result1 []models.UserFields
		result2 error
	}
	ListUsersInSpaceForRoleStub        func(spaceGuid string, role string) ([]models.UserFields, error)
	listUsersInSpaceForRoleMutex       sync.RWMutex
	listUsersInSpaceForRoleArgsForCall []struct {
		spaceGuid string
		role      string
	}
	listUsersInSpaceForRoleReturns struct {
		result1 []models.UserFields
		result2 error
	}
	ListUsersInSpaceForRoleWithNoUAAStub        func(spaceGuid string, role string) ([]models.UserFields, error)
	listUsersInSpaceForRoleWithNoUAAMutex       sync.RWMutex
	listUsersInSpaceForRoleWithNoUAAArgsForCall []struct {
		spaceGuid string
		role      string
	}
	listUsersInSpaceForRoleWithNoUAAReturns struct {
		result1 []models.UserFields
		result2 error
	}
	CreateStub        func(username, password string) (apiErr error)
	createMutex       sync.RWMutex
	createArgsForCall []struct {
		username string
		password string
	}
	createReturns struct {
		result1 error
	}
	DeleteStub        func(userGuid string) (apiErr error)
	deleteMutex       sync.RWMutex
	deleteArgsForCall []struct {
		userGuid string
	}
	deleteReturns struct {
		result1 error
	}
	SetOrgRoleStub        func(userGuid, orgGuid, role string) (apiErr error)
	setOrgRoleMutex       sync.RWMutex
	setOrgRoleArgsForCall []struct {
		userGuid string
		orgGuid  string
		role     string
	}
	setOrgRoleReturns struct {
		result1 error
	}
	SetOrgRoleByUsernameStub        func(username, orgGuid, role string) (apiErr error)
	setOrgRoleByUsernameMutex       sync.RWMutex
	setOrgRoleByUsernameArgsForCall []struct {
		username string
		orgGuid  string
		role     string
	}
	setOrgRoleByUsernameReturns struct {
		result1 error
	}
	UnsetOrgRoleByGuidStub        func(userGuid, orgGuid, role string) (apiErr error)
	unsetOrgRoleByGuidMutex       sync.RWMutex
	unsetOrgRoleByGuidArgsForCall []struct {
		userGuid string
		orgGuid  string
		role     string
	}
	unsetOrgRoleByGuidReturns struct {
		result1 error
	}
	SetSpaceRoleByGuidStub        func(userGuid, spaceGuid, orgGuid, role string) (apiErr error)
	setSpaceRoleByGuidMutex       sync.RWMutex
	setSpaceRoleByGuidArgsForCall []struct {
		userGuid  string
		spaceGuid string
		orgGuid   string
		role      string
	}
	setSpaceRoleByGuidReturns struct {
		result1 error
	}
	SetSpaceRoleByUsernameStub        func(username, spaceGuid, orgGuid, role string) (apiErr error)
	setSpaceRoleByUsernameMutex       sync.RWMutex
	setSpaceRoleByUsernameArgsForCall []struct {
		username  string
		spaceGuid string
		orgGuid   string
		role      string
	}
	setSpaceRoleByUsernameReturns struct {
		result1 error
	}
	UnsetSpaceRoleStub        func(userGuid, spaceGuid, role string) (apiErr error)
	unsetSpaceRoleMutex       sync.RWMutex
	unsetSpaceRoleArgsForCall []struct {
		userGuid  string
		spaceGuid string
		role      string
	}
	unsetSpaceRoleReturns struct {
		result1 error
	}
}

func (fake *FakeUserRepository) FindByUsername(username string) (user models.UserFields, apiErr error) {
	fake.findByUsernameMutex.Lock()
	fake.findByUsernameArgsForCall = append(fake.findByUsernameArgsForCall, struct {
		username string
	}{username})
	fake.findByUsernameMutex.Unlock()
	if fake.FindByUsernameStub != nil {
		return fake.FindByUsernameStub(username)
	} else {
		return fake.findByUsernameReturns.result1, fake.findByUsernameReturns.result2
	}
}

func (fake *FakeUserRepository) FindByUsernameCallCount() int {
	fake.findByUsernameMutex.RLock()
	defer fake.findByUsernameMutex.RUnlock()
	return len(fake.findByUsernameArgsForCall)
}

func (fake *FakeUserRepository) FindByUsernameArgsForCall(i int) string {
	fake.findByUsernameMutex.RLock()
	defer fake.findByUsernameMutex.RUnlock()
	return fake.findByUsernameArgsForCall[i].username
}

func (fake *FakeUserRepository) FindByUsernameReturns(result1 models.UserFields, result2 error) {
	fake.FindByUsernameStub = nil
	fake.findByUsernameReturns = struct {
		result1 models.UserFields
		result2 error
	}{result1, result2}
}

func (fake *FakeUserRepository) ListUsersInOrgForRole(orgGuid string, role string) ([]models.UserFields, error) {
	fake.listUsersInOrgForRoleMutex.Lock()
	fake.listUsersInOrgForRoleArgsForCall = append(fake.listUsersInOrgForRoleArgsForCall, struct {
		orgGuid string
		role    string
	}{orgGuid, role})
	fake.listUsersInOrgForRoleMutex.Unlock()
	if fake.ListUsersInOrgForRoleStub != nil {
		return fake.ListUsersInOrgForRoleStub(orgGuid, role)
	} else {
		return fake.listUsersInOrgForRoleReturns.result1, fake.listUsersInOrgForRoleReturns.result2
	}
}

func (fake *FakeUserRepository) ListUsersInOrgForRoleCallCount() int {
	fake.listUsersInOrgForRoleMutex.RLock()
	defer fake.listUsersInOrgForRoleMutex.RUnlock()
	return len(fake.listUsersInOrgForRoleArgsForCall)
}

func (fake *FakeUserRepository) ListUsersInOrgForRoleArgsForCall(i int) (string, string) {
	fake.listUsersInOrgForRoleMutex.RLock()
	defer fake.listUsersInOrgForRoleMutex.RUnlock()
	return fake.listUsersInOrgForRoleArgsForCall[i].orgGuid, fake.listUsersInOrgForRoleArgsForCall[i].role
}

func (fake *FakeUserRepository) ListUsersInOrgForRoleReturns(result1 []models.UserFields, result2 error) {
	fake.ListUsersInOrgForRoleStub = nil
	fake.listUsersInOrgForRoleReturns = struct {
		result1 []models.UserFields
		result2 error
	}{result1, result2}
}

func (fake *FakeUserRepository) ListUsersInOrgForRoleWithNoUAA(orgGuid string, role string) ([]models.UserFields, error) {
	fake.listUsersInOrgForRoleWithNoUAAMutex.Lock()
	fake.listUsersInOrgForRoleWithNoUAAArgsForCall = append(fake.listUsersInOrgForRoleWithNoUAAArgsForCall, struct {
		orgGuid string
		role    string
	}{orgGuid, role})
	fake.listUsersInOrgForRoleWithNoUAAMutex.Unlock()
	if fake.ListUsersInOrgForRoleWithNoUAAStub != nil {
		return fake.ListUsersInOrgForRoleWithNoUAAStub(orgGuid, role)
	} else {
		return fake.listUsersInOrgForRoleWithNoUAAReturns.result1, fake.listUsersInOrgForRoleWithNoUAAReturns.result2
	}
}

func (fake *FakeUserRepository) ListUsersInOrgForRoleWithNoUAACallCount() int {
	fake.listUsersInOrgForRoleWithNoUAAMutex.RLock()
	defer fake.listUsersInOrgForRoleWithNoUAAMutex.RUnlock()
	return len(fake.listUsersInOrgForRoleWithNoUAAArgsForCall)
}

func (fake *FakeUserRepository) ListUsersInOrgForRoleWithNoUAAArgsForCall(i int) (string, string) {
	fake.listUsersInOrgForRoleWithNoUAAMutex.RLock()
	defer fake.listUsersInOrgForRoleWithNoUAAMutex.RUnlock()
	return fake.listUsersInOrgForRoleWithNoUAAArgsForCall[i].orgGuid, fake.listUsersInOrgForRoleWithNoUAAArgsForCall[i].role
}

func (fake *FakeUserRepository) ListUsersInOrgForRoleWithNoUAAReturns(result1 []models.UserFields, result2 error) {
	fake.ListUsersInOrgForRoleWithNoUAAStub = nil
	fake.listUsersInOrgForRoleWithNoUAAReturns = struct {
		result1 []models.UserFields
		result2 error
	}{result1, result2}
}

func (fake *FakeUserRepository) ListUsersInSpaceForRole(spaceGuid string, role string) ([]models.UserFields, error) {
	fake.listUsersInSpaceForRoleMutex.Lock()
	fake.listUsersInSpaceForRoleArgsForCall = append(fake.listUsersInSpaceForRoleArgsForCall, struct {
		spaceGuid string
		role      string
	}{spaceGuid, role})
	fake.listUsersInSpaceForRoleMutex.Unlock()
	if fake.ListUsersInSpaceForRoleStub != nil {
		return fake.ListUsersInSpaceForRoleStub(spaceGuid, role)
	} else {
		return fake.listUsersInSpaceForRoleReturns.result1, fake.listUsersInSpaceForRoleReturns.result2
	}
}

func (fake *FakeUserRepository) ListUsersInSpaceForRoleCallCount() int {
	fake.listUsersInSpaceForRoleMutex.RLock()
	defer fake.listUsersInSpaceForRoleMutex.RUnlock()
	return len(fake.listUsersInSpaceForRoleArgsForCall)
}

func (fake *FakeUserRepository) ListUsersInSpaceForRoleArgsForCall(i int) (string, string) {
	fake.listUsersInSpaceForRoleMutex.RLock()
	defer fake.listUsersInSpaceForRoleMutex.RUnlock()
	return fake.listUsersInSpaceForRoleArgsForCall[i].spaceGuid, fake.listUsersInSpaceForRoleArgsForCall[i].role
}

func (fake *FakeUserRepository) ListUsersInSpaceForRoleReturns(result1 []models.UserFields, result2 error) {
	fake.ListUsersInSpaceForRoleStub = nil
	fake.listUsersInSpaceForRoleReturns = struct {
		result1 []models.UserFields
		result2 error
	}{result1, result2}
}

func (fake *FakeUserRepository) ListUsersInSpaceForRoleWithNoUAA(spaceGuid string, role string) ([]models.UserFields, error) {
	fake.listUsersInSpaceForRoleWithNoUAAMutex.Lock()
	fake.listUsersInSpaceForRoleWithNoUAAArgsForCall = append(fake.listUsersInSpaceForRoleWithNoUAAArgsForCall, struct {
		spaceGuid string
		role      string
	}{spaceGuid, role})
	fake.listUsersInSpaceForRoleWithNoUAAMutex.Unlock()
	if fake.ListUsersInSpaceForRoleWithNoUAAStub != nil {
		return fake.ListUsersInSpaceForRoleWithNoUAAStub(spaceGuid, role)
	} else {
		return fake.listUsersInSpaceForRoleWithNoUAAReturns.result1, fake.listUsersInSpaceForRoleWithNoUAAReturns.result2
	}
}

func (fake *FakeUserRepository) ListUsersInSpaceForRoleWithNoUAACallCount() int {
	fake.listUsersInSpaceForRoleWithNoUAAMutex.RLock()
	defer fake.listUsersInSpaceForRoleWithNoUAAMutex.RUnlock()
	return len(fake.listUsersInSpaceForRoleWithNoUAAArgsForCall)
}

func (fake *FakeUserRepository) ListUsersInSpaceForRoleWithNoUAAArgsForCall(i int) (string, string) {
	fake.listUsersInSpaceForRoleWithNoUAAMutex.RLock()
	defer fake.listUsersInSpaceForRoleWithNoUAAMutex.RUnlock()
	return fake.listUsersInSpaceForRoleWithNoUAAArgsForCall[i].spaceGuid, fake.listUsersInSpaceForRoleWithNoUAAArgsForCall[i].role
}

func (fake *FakeUserRepository) ListUsersInSpaceForRoleWithNoUAAReturns(result1 []models.UserFields, result2 error) {
	fake.ListUsersInSpaceForRoleWithNoUAAStub = nil
	fake.listUsersInSpaceForRoleWithNoUAAReturns = struct {
		result1 []models.UserFields
		result2 error
	}{result1, result2}
}

func (fake *FakeUserRepository) Create(username string, password string) (apiErr error) {
	fake.createMutex.Lock()
	fake.createArgsForCall = append(fake.createArgsForCall, struct {
		username string
		password string
	}{username, password})
	fake.createMutex.Unlock()
	if fake.CreateStub != nil {
		return fake.CreateStub(username, password)
	} else {
		return fake.createReturns.result1
	}
}

func (fake *FakeUserRepository) CreateCallCount() int {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return len(fake.createArgsForCall)
}

func (fake *FakeUserRepository) CreateArgsForCall(i int) (string, string) {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return fake.createArgsForCall[i].username, fake.createArgsForCall[i].password
}

func (fake *FakeUserRepository) CreateReturns(result1 error) {
	fake.CreateStub = nil
	fake.createReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeUserRepository) Delete(userGuid string) (apiErr error) {
	fake.deleteMutex.Lock()
	fake.deleteArgsForCall = append(fake.deleteArgsForCall, struct {
		userGuid string
	}{userGuid})
	fake.deleteMutex.Unlock()
	if fake.DeleteStub != nil {
		return fake.DeleteStub(userGuid)
	} else {
		return fake.deleteReturns.result1
	}
}

func (fake *FakeUserRepository) DeleteCallCount() int {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return len(fake.deleteArgsForCall)
}

func (fake *FakeUserRepository) DeleteArgsForCall(i int) string {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return fake.deleteArgsForCall[i].userGuid
}

func (fake *FakeUserRepository) DeleteReturns(result1 error) {
	fake.DeleteStub = nil
	fake.deleteReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeUserRepository) SetOrgRole(userGuid string, orgGuid string, role string) (apiErr error) {
	fake.setOrgRoleMutex.Lock()
	fake.setOrgRoleArgsForCall = append(fake.setOrgRoleArgsForCall, struct {
		userGuid string
		orgGuid  string
		role     string
	}{userGuid, orgGuid, role})
	fake.setOrgRoleMutex.Unlock()
	if fake.SetOrgRoleStub != nil {
		return fake.SetOrgRoleStub(userGuid, orgGuid, role)
	} else {
		return fake.setOrgRoleReturns.result1
	}
}

func (fake *FakeUserRepository) SetOrgRoleCallCount() int {
	fake.setOrgRoleMutex.RLock()
	defer fake.setOrgRoleMutex.RUnlock()
	return len(fake.setOrgRoleArgsForCall)
}

func (fake *FakeUserRepository) SetOrgRoleArgsForCall(i int) (string, string, string) {
	fake.setOrgRoleMutex.RLock()
	defer fake.setOrgRoleMutex.RUnlock()
	return fake.setOrgRoleArgsForCall[i].userGuid, fake.setOrgRoleArgsForCall[i].orgGuid, fake.setOrgRoleArgsForCall[i].role
}

func (fake *FakeUserRepository) SetOrgRoleReturns(result1 error) {
	fake.SetOrgRoleStub = nil
	fake.setOrgRoleReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeUserRepository) SetOrgRoleByUsername(username string, orgGuid string, role string) (apiErr error) {
	fake.setOrgRoleByUsernameMutex.Lock()
	fake.setOrgRoleByUsernameArgsForCall = append(fake.setOrgRoleByUsernameArgsForCall, struct {
		username string
		orgGuid  string
		role     string
	}{username, orgGuid, role})
	fake.setOrgRoleByUsernameMutex.Unlock()
	if fake.SetOrgRoleByUsernameStub != nil {
		return fake.SetOrgRoleByUsernameStub(username, orgGuid, role)
	} else {
		return fake.setOrgRoleByUsernameReturns.result1
	}
}

func (fake *FakeUserRepository) SetOrgRoleByUsernameCallCount() int {
	fake.setOrgRoleByUsernameMutex.RLock()
	defer fake.setOrgRoleByUsernameMutex.RUnlock()
	return len(fake.setOrgRoleByUsernameArgsForCall)
}

func (fake *FakeUserRepository) SetOrgRoleByUsernameArgsForCall(i int) (string, string, string) {
	fake.setOrgRoleByUsernameMutex.RLock()
	defer fake.setOrgRoleByUsernameMutex.RUnlock()
	return fake.setOrgRoleByUsernameArgsForCall[i].username, fake.setOrgRoleByUsernameArgsForCall[i].orgGuid, fake.setOrgRoleByUsernameArgsForCall[i].role
}

func (fake *FakeUserRepository) SetOrgRoleByUsernameReturns(result1 error) {
	fake.SetOrgRoleByUsernameStub = nil
	fake.setOrgRoleByUsernameReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeUserRepository) UnsetOrgRoleByGuid(userGuid string, orgGuid string, role string) (apiErr error) {
	fake.unsetOrgRoleByGuidMutex.Lock()
	fake.unsetOrgRoleByGuidArgsForCall = append(fake.unsetOrgRoleByGuidArgsForCall, struct {
		userGuid string
		orgGuid  string
		role     string
	}{userGuid, orgGuid, role})
	fake.unsetOrgRoleByGuidMutex.Unlock()
	if fake.UnsetOrgRoleByGuidStub != nil {
		return fake.UnsetOrgRoleByGuidStub(userGuid, orgGuid, role)
	} else {
		return fake.unsetOrgRoleByGuidReturns.result1
	}
}

func (fake *FakeUserRepository) UnsetOrgRoleByGuidCallCount() int {
	fake.unsetOrgRoleByGuidMutex.RLock()
	defer fake.unsetOrgRoleByGuidMutex.RUnlock()
	return len(fake.unsetOrgRoleByGuidArgsForCall)
}

func (fake *FakeUserRepository) UnsetOrgRoleByGuidArgsForCall(i int) (string, string, string) {
	fake.unsetOrgRoleByGuidMutex.RLock()
	defer fake.unsetOrgRoleByGuidMutex.RUnlock()
	return fake.unsetOrgRoleByGuidArgsForCall[i].userGuid, fake.unsetOrgRoleByGuidArgsForCall[i].orgGuid, fake.unsetOrgRoleByGuidArgsForCall[i].role
}

func (fake *FakeUserRepository) UnsetOrgRoleByGuidReturns(result1 error) {
	fake.UnsetOrgRoleByGuidStub = nil
	fake.unsetOrgRoleByGuidReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeUserRepository) SetSpaceRoleByGuid(userGuid string, spaceGuid string, orgGuid string, role string) (apiErr error) {
	fake.setSpaceRoleByGuidMutex.Lock()
	fake.setSpaceRoleByGuidArgsForCall = append(fake.setSpaceRoleByGuidArgsForCall, struct {
		userGuid  string
		spaceGuid string
		orgGuid   string
		role      string
	}{userGuid, spaceGuid, orgGuid, role})
	fake.setSpaceRoleByGuidMutex.Unlock()
	if fake.SetSpaceRoleByGuidStub != nil {
		return fake.SetSpaceRoleByGuidStub(userGuid, spaceGuid, orgGuid, role)
	} else {
		return fake.setSpaceRoleByGuidReturns.result1
	}
}

func (fake *FakeUserRepository) SetSpaceRoleByGuidCallCount() int {
	fake.setSpaceRoleByGuidMutex.RLock()
	defer fake.setSpaceRoleByGuidMutex.RUnlock()
	return len(fake.setSpaceRoleByGuidArgsForCall)
}

func (fake *FakeUserRepository) SetSpaceRoleByGuidArgsForCall(i int) (string, string, string, string) {
	fake.setSpaceRoleByGuidMutex.RLock()
	defer fake.setSpaceRoleByGuidMutex.RUnlock()
	return fake.setSpaceRoleByGuidArgsForCall[i].userGuid, fake.setSpaceRoleByGuidArgsForCall[i].spaceGuid, fake.setSpaceRoleByGuidArgsForCall[i].orgGuid, fake.setSpaceRoleByGuidArgsForCall[i].role
}

func (fake *FakeUserRepository) SetSpaceRoleByGuidReturns(result1 error) {
	fake.SetSpaceRoleByGuidStub = nil
	fake.setSpaceRoleByGuidReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeUserRepository) SetSpaceRoleByUsername(username string, spaceGuid string, orgGuid string, role string) (apiErr error) {
	fake.setSpaceRoleByUsernameMutex.Lock()
	fake.setSpaceRoleByUsernameArgsForCall = append(fake.setSpaceRoleByUsernameArgsForCall, struct {
		username  string
		spaceGuid string
		orgGuid   string
		role      string
	}{username, spaceGuid, orgGuid, role})
	fake.setSpaceRoleByUsernameMutex.Unlock()
	if fake.SetSpaceRoleByUsernameStub != nil {
		return fake.SetSpaceRoleByUsernameStub(username, spaceGuid, orgGuid, role)
	} else {
		return fake.setSpaceRoleByUsernameReturns.result1
	}
}

func (fake *FakeUserRepository) SetSpaceRoleByUsernameCallCount() int {
	fake.setSpaceRoleByUsernameMutex.RLock()
	defer fake.setSpaceRoleByUsernameMutex.RUnlock()
	return len(fake.setSpaceRoleByUsernameArgsForCall)
}

func (fake *FakeUserRepository) SetSpaceRoleByUsernameArgsForCall(i int) (string, string, string, string) {
	fake.setSpaceRoleByUsernameMutex.RLock()
	defer fake.setSpaceRoleByUsernameMutex.RUnlock()
	return fake.setSpaceRoleByUsernameArgsForCall[i].username, fake.setSpaceRoleByUsernameArgsForCall[i].spaceGuid, fake.setSpaceRoleByUsernameArgsForCall[i].orgGuid, fake.setSpaceRoleByUsernameArgsForCall[i].role
}

func (fake *FakeUserRepository) SetSpaceRoleByUsernameReturns(result1 error) {
	fake.SetSpaceRoleByUsernameStub = nil
	fake.setSpaceRoleByUsernameReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeUserRepository) UnsetSpaceRole(userGuid string, spaceGuid string, role string) (apiErr error) {
	fake.unsetSpaceRoleMutex.Lock()
	fake.unsetSpaceRoleArgsForCall = append(fake.unsetSpaceRoleArgsForCall, struct {
		userGuid  string
		spaceGuid string
		role      string
	}{userGuid, spaceGuid, role})
	fake.unsetSpaceRoleMutex.Unlock()
	if fake.UnsetSpaceRoleStub != nil {
		return fake.UnsetSpaceRoleStub(userGuid, spaceGuid, role)
	} else {
		return fake.unsetSpaceRoleReturns.result1
	}
}

func (fake *FakeUserRepository) UnsetSpaceRoleCallCount() int {
	fake.unsetSpaceRoleMutex.RLock()
	defer fake.unsetSpaceRoleMutex.RUnlock()
	return len(fake.unsetSpaceRoleArgsForCall)
}

func (fake *FakeUserRepository) UnsetSpaceRoleArgsForCall(i int) (string, string, string) {
	fake.unsetSpaceRoleMutex.RLock()
	defer fake.unsetSpaceRoleMutex.RUnlock()
	return fake.unsetSpaceRoleArgsForCall[i].userGuid, fake.unsetSpaceRoleArgsForCall[i].spaceGuid, fake.unsetSpaceRoleArgsForCall[i].role
}

func (fake *FakeUserRepository) UnsetSpaceRoleReturns(result1 error) {
	fake.UnsetSpaceRoleStub = nil
	fake.unsetSpaceRoleReturns = struct {
		result1 error
	}{result1}
}

var _ api.UserRepository = new(FakeUserRepository)
