// This file was generated by counterfeiter
package fakes

import (
	. "github.com/cloudfoundry/cli/cf/api/organizations"

	"github.com/cloudfoundry/cli/cf/models"

	"sync"
)

type FakeOrganizationRepository struct {
	ListOrgsStub        func() (orgs []models.Organization, apiErr error)
	listOrgsMutex       sync.RWMutex
	listOrgsArgsForCall []struct{}
	listOrgsReturns     struct {
		result1 []models.Organization
		result2 error
	}
	FindByNameStub        func(name string) (org models.Organization, apiErr error)
	findByNameMutex       sync.RWMutex
	findByNameArgsForCall []struct {
		name string
	}
	findByNameReturns struct {
		result1 models.Organization
		result2 error
	}
	CreateStub        func(name string) (apiErr error)
	createMutex       sync.RWMutex
	createArgsForCall []struct {
		name string
	}
	createReturns struct {
		result1 error
	}
	RenameStub        func(orgGuid string, name string) (apiErr error)
	renameMutex       sync.RWMutex
	renameArgsForCall []struct {
		orgGuid string
		name    string
	}
	renameReturns struct {
		result1 error
	}
	DeleteStub        func(orgGuid string) (apiErr error)
	deleteMutex       sync.RWMutex
	deleteArgsForCall []struct {
		orgGuid string
	}
	deleteReturns struct {
		result1 error
	}
}

func (fake *FakeOrganizationRepository) ListOrgs() (orgs []models.Organization, apiErr error) {
	fake.listOrgsMutex.Lock()
	defer fake.listOrgsMutex.Unlock()
	fake.listOrgsArgsForCall = append(fake.listOrgsArgsForCall, struct{}{})
	if fake.ListOrgsStub != nil {
		return fake.ListOrgsStub()
	} else {
		return fake.listOrgsReturns.result1, fake.listOrgsReturns.result2
	}
}

func (fake *FakeOrganizationRepository) ListOrgsCallCount() int {
	fake.listOrgsMutex.RLock()
	defer fake.listOrgsMutex.RUnlock()
	return len(fake.listOrgsArgsForCall)
}

func (fake *FakeOrganizationRepository) ListOrgsReturns(result1 []models.Organization, result2 error) {
	fake.listOrgsReturns = struct {
		result1 []models.Organization
		result2 error
	}{result1, result2}
}

func (fake *FakeOrganizationRepository) FindByName(name string) (org models.Organization, apiErr error) {
	fake.findByNameMutex.Lock()
	defer fake.findByNameMutex.Unlock()
	fake.findByNameArgsForCall = append(fake.findByNameArgsForCall, struct {
		name string
	}{name})
	if fake.FindByNameStub != nil {
		return fake.FindByNameStub(name)
	} else {
		return fake.findByNameReturns.result1, fake.findByNameReturns.result2
	}
}

func (fake *FakeOrganizationRepository) FindByNameCallCount() int {
	fake.findByNameMutex.RLock()
	defer fake.findByNameMutex.RUnlock()
	return len(fake.findByNameArgsForCall)
}

func (fake *FakeOrganizationRepository) FindByNameArgsForCall(i int) string {
	fake.findByNameMutex.RLock()
	defer fake.findByNameMutex.RUnlock()
	return fake.findByNameArgsForCall[i].name
}

func (fake *FakeOrganizationRepository) FindByNameReturns(result1 models.Organization, result2 error) {
	fake.findByNameReturns = struct {
		result1 models.Organization
		result2 error
	}{result1, result2}
}

func (fake *FakeOrganizationRepository) Create(name string) (apiErr error) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.createArgsForCall = append(fake.createArgsForCall, struct {
		name string
	}{name})
	if fake.CreateStub != nil {
		return fake.CreateStub(name)
	} else {
		return fake.createReturns.result1
	}
}

func (fake *FakeOrganizationRepository) CreateCallCount() int {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return len(fake.createArgsForCall)
}

func (fake *FakeOrganizationRepository) CreateArgsForCall(i int) string {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return fake.createArgsForCall[i].name
}

func (fake *FakeOrganizationRepository) CreateReturns(result1 error) {
	fake.createReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeOrganizationRepository) Rename(orgGuid string, name string) (apiErr error) {
	fake.renameMutex.Lock()
	defer fake.renameMutex.Unlock()
	fake.renameArgsForCall = append(fake.renameArgsForCall, struct {
		orgGuid string
		name    string
	}{orgGuid, name})
	if fake.RenameStub != nil {
		return fake.RenameStub(orgGuid, name)
	} else {
		return fake.renameReturns.result1
	}
}

func (fake *FakeOrganizationRepository) RenameCallCount() int {
	fake.renameMutex.RLock()
	defer fake.renameMutex.RUnlock()
	return len(fake.renameArgsForCall)
}

func (fake *FakeOrganizationRepository) RenameArgsForCall(i int) (string, string) {
	fake.renameMutex.RLock()
	defer fake.renameMutex.RUnlock()
	return fake.renameArgsForCall[i].orgGuid, fake.renameArgsForCall[i].name
}

func (fake *FakeOrganizationRepository) RenameReturns(result1 error) {
	fake.renameReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeOrganizationRepository) Delete(orgGuid string) (apiErr error) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.deleteArgsForCall = append(fake.deleteArgsForCall, struct {
		orgGuid string
	}{orgGuid})
	if fake.DeleteStub != nil {
		return fake.DeleteStub(orgGuid)
	} else {
		return fake.deleteReturns.result1
	}
}

func (fake *FakeOrganizationRepository) DeleteCallCount() int {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return len(fake.deleteArgsForCall)
}

func (fake *FakeOrganizationRepository) DeleteArgsForCall(i int) string {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return fake.deleteArgsForCall[i].orgGuid
}

func (fake *FakeOrganizationRepository) DeleteReturns(result1 error) {
	fake.deleteReturns = struct {
		result1 error
	}{result1}
}

var _ OrganizationRepository = new(FakeOrganizationRepository)
