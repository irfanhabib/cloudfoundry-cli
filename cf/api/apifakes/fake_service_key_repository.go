// This file was generated by counterfeiter
package apifakes

import (
	"sync"

	"github.com/cloudfoundry/cli/cf/api"
	"github.com/cloudfoundry/cli/cf/models"
)

type FakeServiceKeyRepository struct {
	CreateServiceKeyStub        func(serviceKeyGuid string, keyName string, params map[string]interface{}) error
	createServiceKeyMutex       sync.RWMutex
	createServiceKeyArgsForCall []struct {
		serviceKeyGuid string
		keyName        string
		params         map[string]interface{}
	}
	createServiceKeyReturns struct {
		result1 error
	}
	ListServiceKeysStub        func(serviceKeyGuid string) ([]models.ServiceKey, error)
	listServiceKeysMutex       sync.RWMutex
	listServiceKeysArgsForCall []struct {
		serviceKeyGuid string
	}
	listServiceKeysReturns struct {
		result1 []models.ServiceKey
		result2 error
	}
	GetServiceKeyStub        func(serviceKeyGuid string, keyName string) (models.ServiceKey, error)
	getServiceKeyMutex       sync.RWMutex
	getServiceKeyArgsForCall []struct {
		serviceKeyGuid string
		keyName        string
	}
	getServiceKeyReturns struct {
		result1 models.ServiceKey
		result2 error
	}
	DeleteServiceKeyStub        func(serviceKeyGuid string) error
	deleteServiceKeyMutex       sync.RWMutex
	deleteServiceKeyArgsForCall []struct {
		serviceKeyGuid string
	}
	deleteServiceKeyReturns struct {
		result1 error
	}
}

func (fake *FakeServiceKeyRepository) CreateServiceKey(serviceKeyGuid string, keyName string, params map[string]interface{}) error {
	fake.createServiceKeyMutex.Lock()
	fake.createServiceKeyArgsForCall = append(fake.createServiceKeyArgsForCall, struct {
		serviceKeyGuid string
		keyName        string
		params         map[string]interface{}
	}{serviceKeyGuid, keyName, params})
	fake.createServiceKeyMutex.Unlock()
	if fake.CreateServiceKeyStub != nil {
		return fake.CreateServiceKeyStub(serviceKeyGuid, keyName, params)
	} else {
		return fake.createServiceKeyReturns.result1
	}
}

func (fake *FakeServiceKeyRepository) CreateServiceKeyCallCount() int {
	fake.createServiceKeyMutex.RLock()
	defer fake.createServiceKeyMutex.RUnlock()
	return len(fake.createServiceKeyArgsForCall)
}

func (fake *FakeServiceKeyRepository) CreateServiceKeyArgsForCall(i int) (string, string, map[string]interface{}) {
	fake.createServiceKeyMutex.RLock()
	defer fake.createServiceKeyMutex.RUnlock()
	return fake.createServiceKeyArgsForCall[i].serviceKeyGuid, fake.createServiceKeyArgsForCall[i].keyName, fake.createServiceKeyArgsForCall[i].params
}

func (fake *FakeServiceKeyRepository) CreateServiceKeyReturns(result1 error) {
	fake.CreateServiceKeyStub = nil
	fake.createServiceKeyReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeServiceKeyRepository) ListServiceKeys(serviceKeyGuid string) ([]models.ServiceKey, error) {
	fake.listServiceKeysMutex.Lock()
	fake.listServiceKeysArgsForCall = append(fake.listServiceKeysArgsForCall, struct {
		serviceKeyGuid string
	}{serviceKeyGuid})
	fake.listServiceKeysMutex.Unlock()
	if fake.ListServiceKeysStub != nil {
		return fake.ListServiceKeysStub(serviceKeyGuid)
	} else {
		return fake.listServiceKeysReturns.result1, fake.listServiceKeysReturns.result2
	}
}

func (fake *FakeServiceKeyRepository) ListServiceKeysCallCount() int {
	fake.listServiceKeysMutex.RLock()
	defer fake.listServiceKeysMutex.RUnlock()
	return len(fake.listServiceKeysArgsForCall)
}

func (fake *FakeServiceKeyRepository) ListServiceKeysArgsForCall(i int) string {
	fake.listServiceKeysMutex.RLock()
	defer fake.listServiceKeysMutex.RUnlock()
	return fake.listServiceKeysArgsForCall[i].serviceKeyGuid
}

func (fake *FakeServiceKeyRepository) ListServiceKeysReturns(result1 []models.ServiceKey, result2 error) {
	fake.ListServiceKeysStub = nil
	fake.listServiceKeysReturns = struct {
		result1 []models.ServiceKey
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceKeyRepository) GetServiceKey(serviceKeyGuid string, keyName string) (models.ServiceKey, error) {
	fake.getServiceKeyMutex.Lock()
	fake.getServiceKeyArgsForCall = append(fake.getServiceKeyArgsForCall, struct {
		serviceKeyGuid string
		keyName        string
	}{serviceKeyGuid, keyName})
	fake.getServiceKeyMutex.Unlock()
	if fake.GetServiceKeyStub != nil {
		return fake.GetServiceKeyStub(serviceKeyGuid, keyName)
	} else {
		return fake.getServiceKeyReturns.result1, fake.getServiceKeyReturns.result2
	}
}

func (fake *FakeServiceKeyRepository) GetServiceKeyCallCount() int {
	fake.getServiceKeyMutex.RLock()
	defer fake.getServiceKeyMutex.RUnlock()
	return len(fake.getServiceKeyArgsForCall)
}

func (fake *FakeServiceKeyRepository) GetServiceKeyArgsForCall(i int) (string, string) {
	fake.getServiceKeyMutex.RLock()
	defer fake.getServiceKeyMutex.RUnlock()
	return fake.getServiceKeyArgsForCall[i].serviceKeyGuid, fake.getServiceKeyArgsForCall[i].keyName
}

func (fake *FakeServiceKeyRepository) GetServiceKeyReturns(result1 models.ServiceKey, result2 error) {
	fake.GetServiceKeyStub = nil
	fake.getServiceKeyReturns = struct {
		result1 models.ServiceKey
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceKeyRepository) DeleteServiceKey(serviceKeyGuid string) error {
	fake.deleteServiceKeyMutex.Lock()
	fake.deleteServiceKeyArgsForCall = append(fake.deleteServiceKeyArgsForCall, struct {
		serviceKeyGuid string
	}{serviceKeyGuid})
	fake.deleteServiceKeyMutex.Unlock()
	if fake.DeleteServiceKeyStub != nil {
		return fake.DeleteServiceKeyStub(serviceKeyGuid)
	} else {
		return fake.deleteServiceKeyReturns.result1
	}
}

func (fake *FakeServiceKeyRepository) DeleteServiceKeyCallCount() int {
	fake.deleteServiceKeyMutex.RLock()
	defer fake.deleteServiceKeyMutex.RUnlock()
	return len(fake.deleteServiceKeyArgsForCall)
}

func (fake *FakeServiceKeyRepository) DeleteServiceKeyArgsForCall(i int) string {
	fake.deleteServiceKeyMutex.RLock()
	defer fake.deleteServiceKeyMutex.RUnlock()
	return fake.deleteServiceKeyArgsForCall[i].serviceKeyGuid
}

func (fake *FakeServiceKeyRepository) DeleteServiceKeyReturns(result1 error) {
	fake.DeleteServiceKeyStub = nil
	fake.deleteServiceKeyReturns = struct {
		result1 error
	}{result1}
}

var _ api.ServiceKeyRepository = new(FakeServiceKeyRepository)
